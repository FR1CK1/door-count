
RTC_LCD-Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00001198  0000122c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a4  008000a4  00001270  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154e  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  0000295e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e7  00000000  00000000  000033ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00003dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9f  00000000  00000000  00004562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
      8a:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_timer1>:
 */

void init_timer1(void)		// Zeitmessung bis echo
{
	// Takt im Prescaler durch 8 teilen
	TCCR1B |=  (1<<CS11);
      92:	8e b5       	in	r24, 0x2e	; 46
      94:	82 60       	ori	r24, 0x02	; 2
      96:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~( (1<<CS12) | (1<<CS10) );	// clkI/O / 8 (From prescaler)
      98:	8e b5       	in	r24, 0x2e	; 46
      9a:	8a 7f       	andi	r24, 0xFA	; 250
      9c:	8e bd       	out	0x2e, r24	; 46
      9e:	08 95       	ret

000000a0 <__vector_9>:
	// Overflow Interrupt aktivieren
	// TIMSK |=  (1<<TOIE1);
}

ISR (TIMER1_OVF_vect)	// Überlauf Timer1
{
      a0:	1f 92       	push	r1
      a2:	0f 92       	push	r0
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	0f 92       	push	r0
      a8:	11 24       	eor	r1, r1
      aa:	8f 93       	push	r24
	ovf_error = 2;		// Overflow Error setzen --> nicht messbar
      ac:	82 e0       	ldi	r24, 0x02	; 2
      ae:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
}
      b2:	8f 91       	pop	r24
      b4:	0f 90       	pop	r0
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	0f 90       	pop	r0
      ba:	1f 90       	pop	r1
      bc:	18 95       	reti

000000be <init_distance>:

void init_distance(void)
{
	init_timer1();
      be:	0e 94 49 00 	call	0x92	; 0x92 <init_timer1>
	UM_PORT_DDRx |= (1<<UM_TRIG);	// Trigger Pin Output
      c2:	a6 9a       	sbi	0x14, 6	; 20
	sei();			// Interrupts global zulassen
      c4:	78 94       	sei
      c6:	08 95       	ret

000000c8 <distance>:
}

float distance(uint8_t amax)
{
      c8:	8f 92       	push	r8
      ca:	9f 92       	push	r9
      cc:	af 92       	push	r10
      ce:	bf 92       	push	r11
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	d8 2f       	mov	r29, r24
	uint8_t a=0;
	uint16_t i=0, tout=0;
	float x=0, x_m=0, t=0;
	const float v_schall = 343.2;		// Schallgeschwindigkeit in trockener Luft
	
	for (a=0; a<amax; a++)
      e0:	88 23       	and	r24, r24
      e2:	09 f4       	brne	.+2      	; 0xe6 <distance+0x1e>
      e4:	5a c0       	rjmp	.+180    	; 0x19a <distance+0xd2>
      e6:	c1 2c       	mov	r12, r1
      e8:	d1 2c       	mov	r13, r1
      ea:	76 01       	movw	r14, r12
      ec:	c0 e0       	ldi	r28, 0x00	; 0
		i = TCNT1;					// Zähler auslesen
		// i = 127;		// das wird korrekt ausgegeben
		t = (i * 8.0 / F_CPU) / 2;	// Zeit für eine Strecke
		if (t > 0.037)
		{
			ovf_error = 4;	// Kein Echo
      ee:	14 e0       	ldi	r17, 0x04	; 4
	const float v_schall = 343.2;		// Schallgeschwindigkeit in trockener Luft
	
	for (a=0; a<amax; a++)
	{
		// Trigger
		UM_PORTx |= (1<<UM_TRIG);	// Trigger setzen
      f0:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f2:	2a e1       	ldi	r18, 0x1A	; 26
      f4:	2a 95       	dec	r18
      f6:	f1 f7       	brne	.-4      	; 0xf4 <distance+0x2c>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <distance+0x32>
		_delay_us(10);				// 10 µs warten
		UM_PORTx &= ~(1<<UM_TRIG);	// Trigger löschen
      fa:	ae 98       	cbi	0x15, 6	; 21
		
		tout=0;
		while (!(UM_PORT_PINx & (1<<UM_ECHO)) && (tout<=65536))	// warten, bis Echo gesetzt ist
      fc:	9f 9b       	sbis	0x13, 7	; 19
      fe:	fe cf       	rjmp	.-4      	; 0xfc <distance+0x34>
		{
			tout++;
		}
		
		// Messung beginnen
		TCNT1 = 0;				// Timer 1 auf 0 setzen
     100:	1d bc       	out	0x2d, r1	; 45
     102:	1c bc       	out	0x2c, r1	; 44
		ovf_error = 0;			// Overflow Error rücksetzen
     104:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
		TIFR &= ~(1<<TOV1);		// ggf. gesetzte Overflow Interrups löschen
     108:	88 b7       	in	r24, 0x38	; 56
     10a:	8b 7f       	andi	r24, 0xFB	; 251
     10c:	88 bf       	out	0x38, r24	; 56
		TIMSK |=  (1<<TOIE1);	// Overflow Interrupt aktivieren
     10e:	89 b7       	in	r24, 0x39	; 57
     110:	84 60       	ori	r24, 0x04	; 4
     112:	89 bf       	out	0x39, r24	; 57
		if (tout==65636)
		{
			ovf_error = 1;		// Overflow Error setzen --> Messung startet nach Trigger nicht
		}
		while (UM_PORT_PINx & (1<<UM_ECHO))		// warten, bis Messung beendet ist
     114:	9f 99       	sbic	0x13, 7	; 19
     116:	fe cf       	rjmp	.-4      	; 0x114 <distance+0x4c>
		{
			;
		}
		i = TCNT1;					// Zähler auslesen
     118:	6c b5       	in	r22, 0x2c	; 44
     11a:	7d b5       	in	r23, 0x2d	; 45
		// i = 127;		// das wird korrekt ausgegeben
		t = (i * 8.0 / F_CPU) / 2;	// Zeit für eine Strecke
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	51 e4       	ldi	r21, 0x41	; 65
     12c:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	34 e2       	ldi	r19, 0x24	; 36
     134:	44 ef       	ldi	r20, 0xF4	; 244
     136:	5a e4       	ldi	r21, 0x4A	; 74
     138:	0e 94 0b 04 	call	0x816	; 0x816 <__divsf3>
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	5f e3       	ldi	r21, 0x3F	; 63
     144:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     148:	4b 01       	movw	r8, r22
     14a:	5c 01       	movw	r10, r24
		if (t > 0.037)
     14c:	20 e5       	ldi	r18, 0x50	; 80
     14e:	3d e8       	ldi	r19, 0x8D	; 141
     150:	47 e1       	ldi	r20, 0x17	; 23
     152:	5d e3       	ldi	r21, 0x3D	; 61
     154:	0e 94 5e 05 	call	0xabc	; 0xabc <__gesf2>
     158:	18 16       	cp	r1, r24
     15a:	14 f4       	brge	.+4      	; 0x160 <distance+0x98>
		{
			ovf_error = 4;	// Kein Echo
     15c:	10 93 a4 00 	sts	0x00A4, r17	; 0x8000a4 <__data_end>
		}
		x = v_schall * t;
		x_m = x_m + x;	// Mittelwert bilden: aufaddieren	
     160:	2a e9       	ldi	r18, 0x9A	; 154
     162:	39 e9       	ldi	r19, 0x99	; 153
     164:	4b ea       	ldi	r20, 0xAB	; 171
     166:	53 e4       	ldi	r21, 0x43	; 67
     168:	c5 01       	movw	r24, r10
     16a:	b4 01       	movw	r22, r8
     16c:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	c7 01       	movw	r24, r14
     176:	b6 01       	movw	r22, r12
     178:	0e 94 9a 03 	call	0x734	; 0x734 <__addsf3>
     17c:	6b 01       	movw	r12, r22
     17e:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     180:	8f e7       	ldi	r24, 0x7F	; 127
     182:	98 e3       	ldi	r25, 0x38	; 56
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	81 50       	subi	r24, 0x01	; 1
     188:	90 40       	sbci	r25, 0x00	; 0
     18a:	20 40       	sbci	r18, 0x00	; 0
     18c:	e1 f7       	brne	.-8      	; 0x186 <distance+0xbe>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <distance+0xc8>
     190:	00 00       	nop
	uint8_t a=0;
	uint16_t i=0, tout=0;
	float x=0, x_m=0, t=0;
	const float v_schall = 343.2;		// Schallgeschwindigkeit in trockener Luft
	
	for (a=0; a<amax; a++)
     192:	cf 5f       	subi	r28, 0xFF	; 255
     194:	dc 13       	cpse	r29, r28
     196:	ac cf       	rjmp	.-168    	; 0xf0 <distance+0x28>
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <distance+0xd8>

float distance(uint8_t amax)
{
	uint8_t a=0;
	uint16_t i=0, tout=0;
	float x=0, x_m=0, t=0;
     19a:	c1 2c       	mov	r12, r1
     19c:	d1 2c       	mov	r13, r1
     19e:	76 01       	movw	r14, r12
		x_m = x_m + x;	// Mittelwert bilden: aufaddieren	
		_delay_ms(50);	// mind. 50 ms zwischen zwei Messungen warten
	} // end for
	x_m = x_m / amax;	// Mittelwert berechnen
	
	if (ovf_error == 0)
     1a0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
     1a4:	81 11       	cpse	r24, r1
     1a6:	11 c0       	rjmp	.+34     	; 0x1ca <distance+0x102>
		}
		x = v_schall * t;
		x_m = x_m + x;	// Mittelwert bilden: aufaddieren	
		_delay_ms(50);	// mind. 50 ms zwischen zwei Messungen warten
	} // end for
	x_m = x_m / amax;	// Mittelwert berechnen
     1a8:	6d 2f       	mov	r22, r29
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatsisf>
     1b4:	9b 01       	movw	r18, r22
     1b6:	ac 01       	movw	r20, r24
     1b8:	c7 01       	movw	r24, r14
     1ba:	b6 01       	movw	r22, r12
     1bc:	0e 94 0b 04 	call	0x816	; 0x816 <__divsf3>
	
	if (ovf_error == 0)
	{
		return x_m;		// kein Overflow --> Messwert zurückgeben
     1c0:	56 2f       	mov	r21, r22
     1c2:	47 2f       	mov	r20, r23
     1c4:	38 2f       	mov	r19, r24
     1c6:	29 2f       	mov	r18, r25
     1c8:	10 c0       	rjmp	.+32     	; 0x1ea <distance+0x122>
	}
	else
	{
		return -ovf_error;	// Overflow/Fehler: Fehler zurückgeben
     1ca:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <__data_end>
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	71 95       	neg	r23
     1d2:	61 95       	neg	r22
     1d4:	71 09       	sbc	r23, r1
     1d6:	07 2e       	mov	r0, r23
     1d8:	00 0c       	add	r0, r0
     1da:	88 0b       	sbc	r24, r24
     1dc:	99 0b       	sbc	r25, r25
     1de:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatsisf>
     1e2:	56 2f       	mov	r21, r22
     1e4:	47 2f       	mov	r20, r23
     1e6:	38 2f       	mov	r19, r24
     1e8:	29 2f       	mov	r18, r25
	}	
     1ea:	65 2f       	mov	r22, r21
     1ec:	74 2f       	mov	r23, r20
     1ee:	83 2f       	mov	r24, r19
     1f0:	92 2f       	mov	r25, r18
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	9f 90       	pop	r9
     206:	8f 90       	pop	r8
     208:	08 95       	ret

0000020a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     20a:	96 9a       	sbi	0x12, 6	; 18
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	8a 95       	dec	r24
     210:	f1 f7       	brne	.-4      	; 0x20e <toggle_e+0x4>
     212:	00 c0       	rjmp	.+0      	; 0x214 <toggle_e+0xa>
     214:	96 98       	cbi	0x12, 6	; 18
     216:	08 95       	ret

00000218 <lcd_write>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	d8 2f       	mov	r29, r24
     21e:	66 23       	and	r22, r22
     220:	11 f0       	breq	.+4      	; 0x226 <lcd_write+0xe>
     222:	94 9a       	sbi	0x12, 4	; 18
     224:	01 c0       	rjmp	.+2      	; 0x228 <lcd_write+0x10>
     226:	94 98       	cbi	0x12, 4	; 18
     228:	95 98       	cbi	0x12, 5	; 18
     22a:	81 b3       	in	r24, 0x11	; 17
     22c:	8f 60       	ori	r24, 0x0F	; 15
     22e:	81 bb       	out	0x11, r24	; 17
     230:	c2 b3       	in	r28, 0x12	; 18
     232:	c0 7f       	andi	r28, 0xF0	; 240
     234:	8d 2f       	mov	r24, r29
     236:	82 95       	swap	r24
     238:	8f 70       	andi	r24, 0x0F	; 15
     23a:	8c 2b       	or	r24, r28
     23c:	82 bb       	out	0x12, r24	; 18
     23e:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     242:	df 70       	andi	r29, 0x0F	; 15
     244:	dc 2b       	or	r29, r28
     246:	d2 bb       	out	0x12, r29	; 18
     248:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     24c:	cf 60       	ori	r28, 0x0F	; 15
     24e:	c2 bb       	out	0x12, r28	; 18
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <lcd_read>:
     256:	88 23       	and	r24, r24
     258:	11 f0       	breq	.+4      	; 0x25e <lcd_read+0x8>
     25a:	94 9a       	sbi	0x12, 4	; 18
     25c:	01 c0       	rjmp	.+2      	; 0x260 <lcd_read+0xa>
     25e:	94 98       	cbi	0x12, 4	; 18
     260:	95 9a       	sbi	0x12, 5	; 18
     262:	81 b3       	in	r24, 0x11	; 17
     264:	80 7f       	andi	r24, 0xF0	; 240
     266:	81 bb       	out	0x11, r24	; 17
     268:	96 9a       	sbi	0x12, 6	; 18
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	8a 95       	dec	r24
     26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_read+0x16>
     270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_read+0x1c>
     272:	90 b3       	in	r25, 0x10	; 16
     274:	96 98       	cbi	0x12, 6	; 18
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_read+0x22>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_read+0x28>
     27e:	96 9a       	sbi	0x12, 6	; 18
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	8a 95       	dec	r24
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_read+0x2c>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_read+0x32>
     288:	20 b3       	in	r18, 0x10	; 16
     28a:	2f 70       	andi	r18, 0x0F	; 15
     28c:	89 2f       	mov	r24, r25
     28e:	82 95       	swap	r24
     290:	80 7f       	andi	r24, 0xF0	; 240
     292:	96 98       	cbi	0x12, 6	; 18
     294:	82 2b       	or	r24, r18
     296:	08 95       	ret

00000298 <lcd_waitbusy>:
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_read>
     29e:	88 23       	and	r24, r24
     2a0:	dc f3       	brlt	.-10     	; 0x298 <lcd_waitbusy>
     2a2:	8a e0       	ldi	r24, 0x0A	; 10
     2a4:	8a 95       	dec	r24
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_waitbusy+0xc>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_waitbusy+0x12>
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_read>
     2b0:	08 95       	ret

000002b2 <lcd_command>:
     2b2:	cf 93       	push	r28
     2b4:	c8 2f       	mov	r28, r24
     2b6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_waitbusy>
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	8c 2f       	mov	r24, r28
     2be:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write>
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <lcd_gotoxy>:
     2c6:	61 11       	cpse	r22, r1
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <lcd_gotoxy+0xc>
     2ca:	80 58       	subi	r24, 0x80	; 128
     2cc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
     2d0:	08 95       	ret
     2d2:	80 54       	subi	r24, 0x40	; 64
     2d4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
     2d8:	08 95       	ret

000002da <lcd_clrscr>:
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
     2e0:	08 95       	ret

000002e2 <lcd_putc>:
     2e2:	cf 93       	push	r28
     2e4:	c8 2f       	mov	r28, r24
     2e6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_waitbusy>
     2ea:	ca 30       	cpi	r28, 0x0A	; 10
     2ec:	49 f4       	brne	.+18     	; 0x300 <lcd_putc+0x1e>
     2ee:	80 34       	cpi	r24, 0x40	; 64
     2f0:	10 f0       	brcs	.+4      	; 0x2f6 <lcd_putc+0x14>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <lcd_putc+0x16>
     2f6:	80 e4       	ldi	r24, 0x40	; 64
     2f8:	80 58       	subi	r24, 0x80	; 128
     2fa:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <lcd_putc+0x26>
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	8c 2f       	mov	r24, r28
     304:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write>
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <lcd_puts>:
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	ec 01       	movw	r28, r24
     312:	21 96       	adiw	r28, 0x01	; 1
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	88 23       	and	r24, r24
     31a:	29 f0       	breq	.+10     	; 0x326 <lcd_puts+0x1a>
     31c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_putc>
     320:	89 91       	ld	r24, Y+
     322:	81 11       	cpse	r24, r1
     324:	fb cf       	rjmp	.-10     	; 0x31c <lcd_puts+0x10>
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     32c:	cf 93       	push	r28
     32e:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     330:	81 b3       	in	r24, 0x11	; 17
     332:	8f 67       	ori	r24, 0x7F	; 127
     334:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	9c e7       	ldi	r25, 0x7C	; 124
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_init+0xe>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <lcd_init+0x14>
     340:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     342:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     344:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_toggle();
     346:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     34a:	8f e0       	ldi	r24, 0x0F	; 15
     34c:	97 e2       	ldi	r25, 0x27	; 39
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x22>
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_init+0x28>
     354:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     356:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     35a:	9a ea       	ldi	r25, 0xAA	; 170
     35c:	9a 95       	dec	r25
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x30>
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init+0x36>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     362:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     366:	8a ea       	ldi	r24, 0xAA	; 170
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0x3c>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_init+0x42>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     36e:	90 98       	cbi	0x12, 0	; 18
    lcd_e_toggle();
     370:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
     374:	9a ea       	ldi	r25, 0xAA	; 170
     376:	9a 95       	dec	r25
     378:	f1 f7       	brne	.-4      	; 0x376 <lcd_init+0x4a>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     388:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     38c:	86 e0       	ldi	r24, 0x06	; 6
     38e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>

}/* lcd_init */
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <main>:

*/


int main(void)
{
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	a0 97       	sbiw	r28, 0x20	; 32
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
	char buffer[16]="";			//Buffer für Display
     3b0:	1a 82       	std	Y+2, r1	; 0x02
     3b2:	19 82       	std	Y+1, r1	; 0x01
     3b4:	8e e0       	ldi	r24, 0x0E	; 14
     3b6:	fe 01       	movw	r30, r28
     3b8:	33 96       	adiw	r30, 0x03	; 3
     3ba:	df 01       	movw	r26, r30
     3bc:	28 2f       	mov	r18, r24
     3be:	1d 92       	st	X+, r1
     3c0:	2a 95       	dec	r18
     3c2:	e9 f7       	brne	.-6      	; 0x3be <main+0x22>
	char strline[16] = "";		//string vorbereitet für die Übertragung
     3c4:	1a 8a       	std	Y+18, r1	; 0x12
     3c6:	19 8a       	std	Y+17, r1	; 0x11
     3c8:	70 96       	adiw	r30, 0x10	; 16
     3ca:	df 01       	movw	r26, r30
     3cc:	1d 92       	st	X+, r1
     3ce:	8a 95       	dec	r24
     3d0:	e9 f7       	brne	.-6      	; 0x3cc <main+0x30>
	float dDistanceCal = -1;	//Kallibrierte Entfernung vom Ultraschall
	int errorCount = 0;			//Fehlerzähler
	bool somebody_here = false; //Erkennung, ob wer sich im Regelbereich vom US befindet
	
	//Initialisierung Board
	DDRB = 0xff;			//BoardLEDS
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1 << 1);		//Stromversorgung
     3d6:	a1 9a       	sbi	0x14, 1	; 20
	
	//Display und US werden durch jeweilige Initfunktionen aktiviert
	
	//Zusatzgeräte 1 sek nach Programmstart erst versorgen
	PORTC = 0x00;
     3d8:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3da:	bf ef       	ldi	r27, 0xFF	; 255
     3dc:	e9 e6       	ldi	r30, 0x69	; 105
     3de:	f8 e1       	ldi	r31, 0x18	; 24
     3e0:	b1 50       	subi	r27, 0x01	; 1
     3e2:	e0 40       	sbci	r30, 0x00	; 0
     3e4:	f0 40       	sbci	r31, 0x00	; 0
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0x44>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0x4e>
     3ea:	00 00       	nop
	_delay_ms(1000);
	PORTC |= (1 << 1);
     3ec:	a9 9a       	sbi	0x15, 1	; 21
	
	// Initiaisierung Display
	lcd_init(LCD_DISP_ON);
     3ee:	8c e0       	ldi	r24, 0x0C	; 12
     3f0:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_init>
	lcd_clrscr();
     3f4:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
	
	//initialisierung Ultraschall
	init_distance();		
     3f8:	0e 94 5f 00 	call	0xbe	; 0xbe <init_distance>
	
	
	//Kallibrierung Ultraschall
	//1. Zeile
	memset(buffer, 0, 16);
     3fc:	68 94       	set
     3fe:	ff 24       	eor	r15, r15
     400:	f4 f8       	bld	r15, 4
     402:	8e 01       	movw	r16, r28
     404:	0f 5f       	subi	r16, 0xFF	; 255
     406:	1f 4f       	sbci	r17, 0xFF	; 255
     408:	d8 01       	movw	r26, r16
     40a:	ef 2d       	mov	r30, r15
     40c:	1d 92       	st	X+, r1
     40e:	ea 95       	dec	r30
     410:	e9 f7       	brne	.-6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	strncat(buffer,"Kalibirere",16);
     412:	d8 01       	movw	r26, r16
     414:	0d 90       	ld	r0, X+
     416:	00 20       	and	r0, r0
     418:	e9 f7       	brne	.-6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41a:	11 97       	sbiw	r26, 0x01	; 1
     41c:	8b e0       	ldi	r24, 0x0B	; 11
     41e:	e0 e6       	ldi	r30, 0x60	; 96
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	8a 95       	dec	r24
     428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	lcd_gotoxy(0,0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_gotoxy>
	lcd_puts(buffer);
     432:	c8 01       	movw	r24, r16
     434:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_puts>
	
	//2. Zeile
	memset(buffer, 0, 16);
     438:	d8 01       	movw	r26, r16
     43a:	1d 92       	st	X+, r1
     43c:	fa 94       	dec	r15
     43e:	e9 f7       	brne	.-6      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	strncat(buffer,"Ultraschall...",16);
     440:	d8 01       	movw	r26, r16
     442:	0d 90       	ld	r0, X+
     444:	00 20       	and	r0, r0
     446:	e9 f7       	brne	.-6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     448:	11 97       	sbiw	r26, 0x01	; 1
     44a:	8f e0       	ldi	r24, 0x0F	; 15
     44c:	eb e6       	ldi	r30, 0x6B	; 107
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	01 90       	ld	r0, Z+
     452:	0d 92       	st	X+, r0
     454:	8a 95       	dec	r24
     456:	e1 f7       	brne	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	lcd_gotoxy(0,1);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_gotoxy>
	lcd_puts(buffer);
     460:	c8 01       	movw	r24, r16
     462:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_puts>
	
	//Kallibrierung
	while(dDistanceCal < 0){
		dDistanceCal = distance(14);		
     466:	8e e0       	ldi	r24, 0x0E	; 14
     468:	0e 94 64 00 	call	0xc8	; 0xc8 <distance>
     46c:	6b 01       	movw	r12, r22
     46e:	7c 01       	movw	r14, r24
     470:	bf e7       	ldi	r27, 0x7F	; 127
     472:	e8 e3       	ldi	r30, 0x38	; 56
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	b1 50       	subi	r27, 0x01	; 1
     478:	e0 40       	sbci	r30, 0x00	; 0
     47a:	f0 40       	sbci	r31, 0x00	; 0
     47c:	e1 f7       	brne	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     480:	00 00       	nop
     482:	04 e1       	ldi	r16, 0x14	; 20
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	5d c0       	rjmp	.+186    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
     488:	8e e0       	ldi	r24, 0x0E	; 14
     48a:	0e 94 64 00 	call	0xc8	; 0xc8 <distance>
     48e:	6b 01       	movw	r12, r22
     490:	7c 01       	movw	r14, r24
     492:	2f e7       	ldi	r18, 0x7F	; 127
     494:	38 e3       	ldi	r19, 0x38	; 56
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	21 50       	subi	r18, 0x01	; 1
     49a:	30 40       	sbci	r19, 0x00	; 0
     49c:	80 40       	sbci	r24, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4a2:	00 00       	nop
     4a4:	01 50       	subi	r16, 0x01	; 1
     4a6:	11 09       	sbc	r17, r1
		errorCount++;
		_delay_ms(50);
		if (errorCount > 20)
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4aa:	4b c0       	rjmp	.+150    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
		{
			//1. Zeile
			memset(buffer, 0, 16);
     4ac:	68 94       	set
     4ae:	ff 24       	eor	r15, r15
     4b0:	f4 f8       	bld	r15, 4
     4b2:	8e 01       	movw	r16, r28
     4b4:	0f 5f       	subi	r16, 0xFF	; 255
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	d8 01       	movw	r26, r16
     4ba:	ef 2d       	mov	r30, r15
     4bc:	1d 92       	st	X+, r1
     4be:	ea 95       	dec	r30
     4c0:	e9 f7       	brne	.-6      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			strncat(buffer,"Kalibirerung",16);
     4c2:	d8 01       	movw	r26, r16
     4c4:	0d 90       	ld	r0, X+
     4c6:	00 20       	and	r0, r0
     4c8:	e9 f7       	brne	.-6      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	8d e0       	ldi	r24, 0x0D	; 13
     4ce:	ea e7       	ldi	r30, 0x7A	; 122
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	01 90       	ld	r0, Z+
     4d4:	0d 92       	st	X+, r0
     4d6:	8a 95       	dec	r24
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
			lcd_gotoxy(0,0);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_gotoxy>
			lcd_puts(buffer);
     4e2:	c8 01       	movw	r24, r16
     4e4:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_puts>
				
			//2. Zeile
			memset(buffer, 0, 16);
     4e8:	d8 01       	movw	r26, r16
     4ea:	1d 92       	st	X+, r1
     4ec:	fa 94       	dec	r15
     4ee:	e9 f7       	brne	.-6      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			strncat(buffer,"fehlgeschlagen",16);
     4f0:	d8 01       	movw	r26, r16
     4f2:	0d 90       	ld	r0, X+
     4f4:	00 20       	and	r0, r0
     4f6:	e9 f7       	brne	.-6      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4f8:	11 97       	sbiw	r26, 0x01	; 1
     4fa:	8f e0       	ldi	r24, 0x0F	; 15
     4fc:	e7 e8       	ldi	r30, 0x87	; 135
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	01 90       	ld	r0, Z+
     502:	0d 92       	st	X+, r0
     504:	8a 95       	dec	r24
     506:	e1 f7       	brne	.-8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
			lcd_gotoxy(0,1);
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_gotoxy>
			lcd_puts(buffer);
     510:	c8 01       	movw	r24, r16
     512:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_puts>
			
			while (true)
			{
				PORTB = 0x00;
				_delay_ms(250);
				PORTB = 0xff;
     516:	8f ef       	ldi	r24, 0xFF	; 255
			lcd_gotoxy(0,1);
			lcd_puts(buffer);
			
			while (true)
			{
				PORTB = 0x00;
     518:	18 ba       	out	0x18, r1	; 24
     51a:	bf e7       	ldi	r27, 0x7F	; 127
     51c:	ea e1       	ldi	r30, 0x1A	; 26
     51e:	f6 e0       	ldi	r31, 0x06	; 6
     520:	b1 50       	subi	r27, 0x01	; 1
     522:	e0 40       	sbci	r30, 0x00	; 0
     524:	f0 40       	sbci	r31, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     52a:	00 00       	nop
				_delay_ms(250);
				PORTB = 0xff;
     52c:	88 bb       	out	0x18, r24	; 24
     52e:	2f e7       	ldi	r18, 0x7F	; 127
     530:	3a e1       	ldi	r19, 0x1A	; 26
     532:	96 e0       	ldi	r25, 0x06	; 6
     534:	21 50       	subi	r18, 0x01	; 1
     536:	30 40       	sbci	r19, 0x00	; 0
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     53e:	00 00       	nop
     540:	eb cf       	rjmp	.-42     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
	strncat(buffer,"Ultraschall...",16);
	lcd_gotoxy(0,1);
	lcd_puts(buffer);
	
	//Kallibrierung
	while(dDistanceCal < 0){
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	c7 01       	movw	r24, r14
     54a:	b6 01       	movw	r22, r12
     54c:	0e 94 06 04 	call	0x80c	; 0x80c <__cmpsf2>
     550:	88 23       	and	r24, r24
     552:	0c f4       	brge	.+2      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
     554:	99 cf       	rjmp	.-206    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		}

	}
	
	//Leeren vom Display, Abschalten der Board LEDs
	lcd_clrscr();
     556:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
     55a:	af ef       	ldi	r26, 0xFF	; 255
     55c:	b0 e7       	ldi	r27, 0x70	; 112
     55e:	e2 e0       	ldi	r30, 0x02	; 2
     560:	a1 50       	subi	r26, 0x01	; 1
     562:	b0 40       	sbci	r27, 0x00	; 0
     564:	e0 40       	sbci	r30, 0x00	; 0
     566:	e1 f7       	brne	.-8      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     568:	00 c0       	rjmp	.+0      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
     56a:	00 00       	nop
	_delay_ms(100);
	PORTB = 0xff;
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	88 bb       	out	0x18, r24	; 24
	
	
	//Board-LEDs als Entferungsangabe nutzen
	PORTB = ~(uint8_t)(dDistanceCal*100);
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	48 ec       	ldi	r20, 0xC8	; 200
     576:	52 e4       	ldi	r21, 0x42	; 66
     578:	c7 01       	movw	r24, r14
     57a:	b6 01       	movw	r22, r12
     57c:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     580:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
     584:	26 2e       	mov	r2, r22
     586:	86 2f       	mov	r24, r22
     588:	80 95       	com	r24
     58a:	88 bb       	out	0x18, r24	; 24
     58c:	ff ef       	ldi	r31, 0xFF	; 255
     58e:	24 e3       	ldi	r18, 0x34	; 52
     590:	3c e0       	ldi	r19, 0x0C	; 12
     592:	f1 50       	subi	r31, 0x01	; 1
     594:	20 40       	sbci	r18, 0x00	; 0
     596:	30 40       	sbci	r19, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
     59c:	00 00       	nop
	
	int iAnzahl = 0;			//Anzahl an Personen im Raum
	float dDistance = 0;		//Aktuelle Entfernung vom Ultraschall
	float dDistanceCal = -1;	//Kallibrierte Entfernung vom Ultraschall
	int errorCount = 0;			//Fehlerzähler
	bool somebody_here = false; //Erkennung, ob wer sich im Regelbereich vom US befindet
     59e:	31 2c       	mov	r3, r1
int main(void)
{
	char buffer[16]="";			//Buffer für Display
	char strline[16] = "";		//string vorbereitet für die Übertragung
	
	int iAnzahl = 0;			//Anzahl an Personen im Raum
     5a0:	c1 2c       	mov	r12, r1
     5a2:	d1 2c       	mov	r13, r1
				somebody_here = true;
				_delay_ms(100);
			}
		} else {
			//Person hat Messbereich verlassen
			somebody_here = false;
     5a4:	91 2c       	mov	r9, r1
			_delay_ms(100);
		}	
		
		//1. Zeile
		memset(buffer, 0, 16);
     5a6:	68 94       	set
     5a8:	88 24       	eor	r8, r8
     5aa:	84 f8       	bld	r8, 4
     5ac:	8e 01       	movw	r16, r28
     5ae:	0f 5f       	subi	r16, 0xFF	; 255
     5b0:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_gotoxy(0,0);
		lcd_puts(buffer);
		
		//2. Zeile mit Zahl
		memset(buffer,0,16);
		sprintf(strline,"%d",iAnzahl);
     5b2:	0f 2e       	mov	r0, r31
     5b4:	f0 ea       	ldi	r31, 0xA0	; 160
     5b6:	af 2e       	mov	r10, r31
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	bf 2e       	mov	r11, r31
     5bc:	f0 2d       	mov	r31, r0
     5be:	7e 01       	movw	r14, r28
     5c0:	81 e1       	ldi	r24, 0x11	; 17
     5c2:	e8 0e       	add	r14, r24
     5c4:	f1 1c       	adc	r15, r1
		lcd_puts(buffer); //Puffer schreiben
		*/
		
		
		//Messung durchführen
		dDistance=distance(8);
     5c6:	88 e0       	ldi	r24, 0x08	; 8
     5c8:	0e 94 64 00 	call	0xc8	; 0xc8 <distance>
     5cc:	2b 01       	movw	r4, r22
     5ce:	3c 01       	movw	r6, r24
		
		//Fehlerprüfung
		if (dDistance>=0)
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	a9 01       	movw	r20, r18
     5d6:	0e 94 5e 05 	call	0xabc	; 0xabc <__gesf2>
     5da:	88 23       	and	r24, r24
     5dc:	6c f0       	brlt	.+26     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
		{
			PORTB = ~(uint8_t)(dDistance*100); //Distanz auf Board-LEDs ausgeben
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	48 ec       	ldi	r20, 0xC8	; 200
     5e4:	52 e4       	ldi	r21, 0x42	; 66
     5e6:	c3 01       	movw	r24, r6
     5e8:	b2 01       	movw	r22, r4
     5ea:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     5ee:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
     5f2:	60 95       	com	r22
     5f4:	68 bb       	out	0x18, r22	; 24
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
		}
		else
		{
			PORTB = 0x00;	// Fehler ausgeben
     5f8:	18 ba       	out	0x18, r1	; 24
		}
		
		//Vergleich, ob US eine Verringerung feststellt
		if ((uint8_t)(dDistance*100) < (uint8_t)(dDistanceCal*100))
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	48 ec       	ldi	r20, 0xC8	; 200
     600:	52 e4       	ldi	r21, 0x42	; 66
     602:	c3 01       	movw	r24, r6
     604:	b2 01       	movw	r22, r4
     606:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     60a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
     60e:	62 15       	cp	r22, r2
     610:	d8 f4       	brcc	.+54     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
		{
			//Pürfen, ob schon jemand erkannt wurde
			if (somebody_here)
     612:	33 20       	and	r3, r3
     614:	51 f0       	breq	.+20     	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
     616:	9f ef       	ldi	r25, 0xFF	; 255
     618:	a0 e7       	ldi	r26, 0x70	; 112
     61a:	b2 e0       	ldi	r27, 0x02	; 2
     61c:	91 50       	subi	r25, 0x01	; 1
     61e:	a0 40       	sbci	r26, 0x00	; 0
     620:	b0 40       	sbci	r27, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     624:	00 c0       	rjmp	.+0      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
     626:	00 00       	nop
     628:	19 c0       	rjmp	.+50     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
			{
				//Person befindet sich bereits im Messbereich
				_delay_ms(100);
			} else {
				//Person hat Messbereich betreten
				iAnzahl++;
     62a:	ef ef       	ldi	r30, 0xFF	; 255
     62c:	ce 1a       	sub	r12, r30
     62e:	de 0a       	sbc	r13, r30
     630:	ff ef       	ldi	r31, 0xFF	; 255
     632:	20 e7       	ldi	r18, 0x70	; 112
     634:	32 e0       	ldi	r19, 0x02	; 2
     636:	f1 50       	subi	r31, 0x01	; 1
     638:	20 40       	sbci	r18, 0x00	; 0
     63a:	30 40       	sbci	r19, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
     640:	00 00       	nop
				somebody_here = true;
     642:	33 24       	eor	r3, r3
     644:	33 94       	inc	r3
     646:	0a c0       	rjmp	.+20     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	90 e7       	ldi	r25, 0x70	; 112
     64c:	a2 e0       	ldi	r26, 0x02	; 2
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	90 40       	sbci	r25, 0x00	; 0
     652:	a0 40       	sbci	r26, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
     656:	00 c0       	rjmp	.+0      	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
     658:	00 00       	nop
				_delay_ms(100);
			}
		} else {
			//Person hat Messbereich verlassen
			somebody_here = false;
     65a:	39 2c       	mov	r3, r9
			_delay_ms(100);
		}	
		
		//1. Zeile
		memset(buffer, 0, 16);
     65c:	f8 01       	movw	r30, r16
     65e:	28 2d       	mov	r18, r8
     660:	11 92       	st	Z+, r1
     662:	2a 95       	dec	r18
     664:	e9 f7       	brne	.-6      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
		strncat(buffer,"Personen:",16);
     666:	d8 01       	movw	r26, r16
     668:	0d 90       	ld	r0, X+
     66a:	00 20       	and	r0, r0
     66c:	e9 f7       	brne	.-6      	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	8a e0       	ldi	r24, 0x0A	; 10
     672:	e6 e9       	ldi	r30, 0x96	; 150
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	01 90       	ld	r0, Z+
     678:	0d 92       	st	X+, r0
     67a:	8a 95       	dec	r24
     67c:	e1 f7       	brne	.-8      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
		lcd_gotoxy(0,0);
     67e:	69 2d       	mov	r22, r9
     680:	89 2d       	mov	r24, r9
     682:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_gotoxy>
		lcd_puts(buffer);
     686:	c8 01       	movw	r24, r16
     688:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_puts>
		
		//2. Zeile mit Zahl
		memset(buffer,0,16);
     68c:	d8 01       	movw	r26, r16
     68e:	e8 2d       	mov	r30, r8
     690:	1d 92       	st	X+, r1
     692:	ea 95       	dec	r30
     694:	e9 f7       	brne	.-6      	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
		sprintf(strline,"%d",iAnzahl);
     696:	df 92       	push	r13
     698:	cf 92       	push	r12
     69a:	bf 92       	push	r11
     69c:	af 92       	push	r10
     69e:	ff 92       	push	r15
     6a0:	ef 92       	push	r14
     6a2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sprintf>
		strncat(buffer, strline, 16);
     6a6:	40 e1       	ldi	r20, 0x10	; 16
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	b7 01       	movw	r22, r14
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 d0 05 	call	0xba0	; 0xba0 <strncat>
		lcd_gotoxy(0,1);
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	89 2d       	mov	r24, r9
     6b6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_gotoxy>
		lcd_puts(buffer);
     6ba:	c8 01       	movw	r24, r16
     6bc:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_puts>
		
	}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	7c cf       	rjmp	.-264    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>

000006ce <__vector_4>:
	// 6. Enable interrupts, if needed.
	TIMSK |= (1<<OCIE2);				// output compare interrupt
}

ISR(TIMER2_COMP_vect)	// Timer 2 output compare interrupt
{
     6ce:	1f 92       	push	r1
     6d0:	0f 92       	push	r0
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	0f 92       	push	r0
     6d6:	11 24       	eor	r1, r1
     6d8:	8f 93       	push	r24
	TCCR2 = TCCR2;      // Timer läuft nicht mit CPU-Takt, sondern
     6da:	85 b5       	in	r24, 0x25	; 37
     6dc:	85 bd       	out	0x25, r24	; 37
						// mit 32768 Hz! Schreibvorgang auf
						// ein Timer-Register --> am Schluss
						// im ASSR-Register nachsehen, ob dieser
						// fertig ist (siehe while am Schluss)
	sekunde++;
     6de:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <sekunde>
     6e2:	8f 5f       	subi	r24, 0xFF	; 255
     6e4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <sekunde>
	if(sekunde == 60)
     6e8:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <sekunde>
     6ec:	8c 33       	cpi	r24, 0x3C	; 60
     6ee:	39 f4       	brne	.+14     	; 0x6fe <__vector_4+0x30>
	{
		minute++;
     6f0:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <minute>
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <minute>
		sekunde = 0;
     6fa:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <sekunde>
	}
	if(minute == 60)
     6fe:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <minute>
     702:	8c 33       	cpi	r24, 0x3C	; 60
     704:	39 f4       	brne	.+14     	; 0x714 <__vector_4+0x46>
	{
		stunde++;
     706:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <stunde>
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <stunde>
		minute = 0;
     710:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <minute>
	}
	if(stunde == 24)
     714:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <stunde>
     718:	88 31       	cpi	r24, 0x18	; 24
     71a:	11 f4       	brne	.+4      	; 0x720 <__vector_4+0x52>
	{
		stunde = 0;
     71c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <stunde>
	}
	while(ASSR & ((1<<TCN2UB) | (1<<OCR2UB) | (1<<TCR2UB)));  // siehe erster Befehl in der Interrupt-Routine
     720:	82 b5       	in	r24, 0x22	; 34
     722:	87 70       	andi	r24, 0x07	; 7
     724:	e9 f7       	brne	.-6      	; 0x720 <__vector_4+0x52>
     726:	8f 91       	pop	r24
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__subsf3>:
     732:	50 58       	subi	r21, 0x80	; 128

00000734 <__addsf3>:
     734:	bb 27       	eor	r27, r27
     736:	aa 27       	eor	r26, r26
     738:	0e 94 b1 03 	call	0x762	; 0x762 <__addsf3x>
     73c:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_round>
     740:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscA>
     744:	38 f0       	brcs	.+14     	; 0x754 <__addsf3+0x20>
     746:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_pscB>
     74a:	20 f0       	brcs	.+8      	; 0x754 <__addsf3+0x20>
     74c:	39 f4       	brne	.+14     	; 0x75c <__addsf3+0x28>
     74e:	9f 3f       	cpi	r25, 0xFF	; 255
     750:	19 f4       	brne	.+6      	; 0x758 <__addsf3+0x24>
     752:	26 f4       	brtc	.+8      	; 0x75c <__addsf3+0x28>
     754:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_nan>
     758:	0e f4       	brtc	.+2      	; 0x75c <__addsf3+0x28>
     75a:	e0 95       	com	r30
     75c:	e7 fb       	bst	r30, 7
     75e:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>

00000762 <__addsf3x>:
     762:	e9 2f       	mov	r30, r25
     764:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_split3>
     768:	58 f3       	brcs	.-42     	; 0x740 <__addsf3+0xc>
     76a:	ba 17       	cp	r27, r26
     76c:	62 07       	cpc	r22, r18
     76e:	73 07       	cpc	r23, r19
     770:	84 07       	cpc	r24, r20
     772:	95 07       	cpc	r25, r21
     774:	20 f0       	brcs	.+8      	; 0x77e <__addsf3x+0x1c>
     776:	79 f4       	brne	.+30     	; 0x796 <__addsf3x+0x34>
     778:	a6 f5       	brtc	.+104    	; 0x7e2 <__addsf3x+0x80>
     77a:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_zero>
     77e:	0e f4       	brtc	.+2      	; 0x782 <__addsf3x+0x20>
     780:	e0 95       	com	r30
     782:	0b 2e       	mov	r0, r27
     784:	ba 2f       	mov	r27, r26
     786:	a0 2d       	mov	r26, r0
     788:	0b 01       	movw	r0, r22
     78a:	b9 01       	movw	r22, r18
     78c:	90 01       	movw	r18, r0
     78e:	0c 01       	movw	r0, r24
     790:	ca 01       	movw	r24, r20
     792:	a0 01       	movw	r20, r0
     794:	11 24       	eor	r1, r1
     796:	ff 27       	eor	r31, r31
     798:	59 1b       	sub	r21, r25
     79a:	99 f0       	breq	.+38     	; 0x7c2 <__addsf3x+0x60>
     79c:	59 3f       	cpi	r21, 0xF9	; 249
     79e:	50 f4       	brcc	.+20     	; 0x7b4 <__addsf3x+0x52>
     7a0:	50 3e       	cpi	r21, 0xE0	; 224
     7a2:	68 f1       	brcs	.+90     	; 0x7fe <__addsf3x+0x9c>
     7a4:	1a 16       	cp	r1, r26
     7a6:	f0 40       	sbci	r31, 0x00	; 0
     7a8:	a2 2f       	mov	r26, r18
     7aa:	23 2f       	mov	r18, r19
     7ac:	34 2f       	mov	r19, r20
     7ae:	44 27       	eor	r20, r20
     7b0:	58 5f       	subi	r21, 0xF8	; 248
     7b2:	f3 cf       	rjmp	.-26     	; 0x79a <__addsf3x+0x38>
     7b4:	46 95       	lsr	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	a7 95       	ror	r26
     7bc:	f0 40       	sbci	r31, 0x00	; 0
     7be:	53 95       	inc	r21
     7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__addsf3x+0x52>
     7c2:	7e f4       	brtc	.+30     	; 0x7e2 <__addsf3x+0x80>
     7c4:	1f 16       	cp	r1, r31
     7c6:	ba 0b       	sbc	r27, r26
     7c8:	62 0b       	sbc	r22, r18
     7ca:	73 0b       	sbc	r23, r19
     7cc:	84 0b       	sbc	r24, r20
     7ce:	ba f0       	brmi	.+46     	; 0x7fe <__addsf3x+0x9c>
     7d0:	91 50       	subi	r25, 0x01	; 1
     7d2:	a1 f0       	breq	.+40     	; 0x7fc <__addsf3x+0x9a>
     7d4:	ff 0f       	add	r31, r31
     7d6:	bb 1f       	adc	r27, r27
     7d8:	66 1f       	adc	r22, r22
     7da:	77 1f       	adc	r23, r23
     7dc:	88 1f       	adc	r24, r24
     7de:	c2 f7       	brpl	.-16     	; 0x7d0 <__addsf3x+0x6e>
     7e0:	0e c0       	rjmp	.+28     	; 0x7fe <__addsf3x+0x9c>
     7e2:	ba 0f       	add	r27, r26
     7e4:	62 1f       	adc	r22, r18
     7e6:	73 1f       	adc	r23, r19
     7e8:	84 1f       	adc	r24, r20
     7ea:	48 f4       	brcc	.+18     	; 0x7fe <__addsf3x+0x9c>
     7ec:	87 95       	ror	r24
     7ee:	77 95       	ror	r23
     7f0:	67 95       	ror	r22
     7f2:	b7 95       	ror	r27
     7f4:	f7 95       	ror	r31
     7f6:	9e 3f       	cpi	r25, 0xFE	; 254
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <__addsf3x+0x9a>
     7fa:	b0 cf       	rjmp	.-160    	; 0x75c <__addsf3+0x28>
     7fc:	93 95       	inc	r25
     7fe:	88 0f       	add	r24, r24
     800:	08 f0       	brcs	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     802:	99 27       	eor	r25, r25
     804:	ee 0f       	add	r30, r30
     806:	97 95       	ror	r25
     808:	87 95       	ror	r24
     80a:	08 95       	ret

0000080c <__cmpsf2>:
     80c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_cmp>
     810:	08 f4       	brcc	.+2      	; 0x814 <__cmpsf2+0x8>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	08 95       	ret

00000816 <__divsf3>:
     816:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3x>
     81a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_round>
     81e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_pscB>
     822:	58 f0       	brcs	.+22     	; 0x83a <__divsf3+0x24>
     824:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscA>
     828:	40 f0       	brcs	.+16     	; 0x83a <__divsf3+0x24>
     82a:	29 f4       	brne	.+10     	; 0x836 <__divsf3+0x20>
     82c:	5f 3f       	cpi	r21, 0xFF	; 255
     82e:	29 f0       	breq	.+10     	; 0x83a <__divsf3+0x24>
     830:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>
     834:	51 11       	cpse	r21, r1
     836:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_szero>
     83a:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_nan>

0000083e <__divsf3x>:
     83e:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_split3>
     842:	68 f3       	brcs	.-38     	; 0x81e <__divsf3+0x8>

00000844 <__divsf3_pse>:
     844:	99 23       	and	r25, r25
     846:	b1 f3       	breq	.-20     	; 0x834 <__divsf3+0x1e>
     848:	55 23       	and	r21, r21
     84a:	91 f3       	breq	.-28     	; 0x830 <__divsf3+0x1a>
     84c:	95 1b       	sub	r25, r21
     84e:	55 0b       	sbc	r21, r21
     850:	bb 27       	eor	r27, r27
     852:	aa 27       	eor	r26, r26
     854:	62 17       	cp	r22, r18
     856:	73 07       	cpc	r23, r19
     858:	84 07       	cpc	r24, r20
     85a:	38 f0       	brcs	.+14     	; 0x86a <__stack+0xb>
     85c:	9f 5f       	subi	r25, 0xFF	; 255
     85e:	5f 4f       	sbci	r21, 0xFF	; 255
     860:	22 0f       	add	r18, r18
     862:	33 1f       	adc	r19, r19
     864:	44 1f       	adc	r20, r20
     866:	aa 1f       	adc	r26, r26
     868:	a9 f3       	breq	.-22     	; 0x854 <__divsf3_pse+0x10>
     86a:	35 d0       	rcall	.+106    	; 0x8d6 <__stack+0x77>
     86c:	0e 2e       	mov	r0, r30
     86e:	3a f0       	brmi	.+14     	; 0x87e <__stack+0x1f>
     870:	e0 e8       	ldi	r30, 0x80	; 128
     872:	32 d0       	rcall	.+100    	; 0x8d8 <__stack+0x79>
     874:	91 50       	subi	r25, 0x01	; 1
     876:	50 40       	sbci	r21, 0x00	; 0
     878:	e6 95       	lsr	r30
     87a:	00 1c       	adc	r0, r0
     87c:	ca f7       	brpl	.-14     	; 0x870 <__stack+0x11>
     87e:	2b d0       	rcall	.+86     	; 0x8d6 <__stack+0x77>
     880:	fe 2f       	mov	r31, r30
     882:	29 d0       	rcall	.+82     	; 0x8d6 <__stack+0x77>
     884:	66 0f       	add	r22, r22
     886:	77 1f       	adc	r23, r23
     888:	88 1f       	adc	r24, r24
     88a:	bb 1f       	adc	r27, r27
     88c:	26 17       	cp	r18, r22
     88e:	37 07       	cpc	r19, r23
     890:	48 07       	cpc	r20, r24
     892:	ab 07       	cpc	r26, r27
     894:	b0 e8       	ldi	r27, 0x80	; 128
     896:	09 f0       	breq	.+2      	; 0x89a <__stack+0x3b>
     898:	bb 0b       	sbc	r27, r27
     89a:	80 2d       	mov	r24, r0
     89c:	bf 01       	movw	r22, r30
     89e:	ff 27       	eor	r31, r31
     8a0:	93 58       	subi	r25, 0x83	; 131
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	3a f0       	brmi	.+14     	; 0x8b4 <__stack+0x55>
     8a6:	9e 3f       	cpi	r25, 0xFE	; 254
     8a8:	51 05       	cpc	r21, r1
     8aa:	78 f0       	brcs	.+30     	; 0x8ca <__stack+0x6b>
     8ac:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>
     8b0:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_szero>
     8b4:	5f 3f       	cpi	r21, 0xFF	; 255
     8b6:	e4 f3       	brlt	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	98 3e       	cpi	r25, 0xE8	; 232
     8ba:	d4 f3       	brlt	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	86 95       	lsr	r24
     8be:	77 95       	ror	r23
     8c0:	67 95       	ror	r22
     8c2:	b7 95       	ror	r27
     8c4:	f7 95       	ror	r31
     8c6:	9f 5f       	subi	r25, 0xFF	; 255
     8c8:	c9 f7       	brne	.-14     	; 0x8bc <__stack+0x5d>
     8ca:	88 0f       	add	r24, r24
     8cc:	91 1d       	adc	r25, r1
     8ce:	96 95       	lsr	r25
     8d0:	87 95       	ror	r24
     8d2:	97 f9       	bld	r25, 7
     8d4:	08 95       	ret
     8d6:	e1 e0       	ldi	r30, 0x01	; 1
     8d8:	66 0f       	add	r22, r22
     8da:	77 1f       	adc	r23, r23
     8dc:	88 1f       	adc	r24, r24
     8de:	bb 1f       	adc	r27, r27
     8e0:	62 17       	cp	r22, r18
     8e2:	73 07       	cpc	r23, r19
     8e4:	84 07       	cpc	r24, r20
     8e6:	ba 07       	cpc	r27, r26
     8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__stack+0x93>
     8ea:	62 1b       	sub	r22, r18
     8ec:	73 0b       	sbc	r23, r19
     8ee:	84 0b       	sbc	r24, r20
     8f0:	ba 0b       	sbc	r27, r26
     8f2:	ee 1f       	adc	r30, r30
     8f4:	88 f7       	brcc	.-30     	; 0x8d8 <__stack+0x79>
     8f6:	e0 95       	com	r30
     8f8:	08 95       	ret

000008fa <__fixunssfsi>:
     8fa:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_splitA>
     8fe:	88 f0       	brcs	.+34     	; 0x922 <__fixunssfsi+0x28>
     900:	9f 57       	subi	r25, 0x7F	; 127
     902:	98 f0       	brcs	.+38     	; 0x92a <__fixunssfsi+0x30>
     904:	b9 2f       	mov	r27, r25
     906:	99 27       	eor	r25, r25
     908:	b7 51       	subi	r27, 0x17	; 23
     90a:	b0 f0       	brcs	.+44     	; 0x938 <__fixunssfsi+0x3e>
     90c:	e1 f0       	breq	.+56     	; 0x946 <__fixunssfsi+0x4c>
     90e:	66 0f       	add	r22, r22
     910:	77 1f       	adc	r23, r23
     912:	88 1f       	adc	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	1a f0       	brmi	.+6      	; 0x91e <__fixunssfsi+0x24>
     918:	ba 95       	dec	r27
     91a:	c9 f7       	brne	.-14     	; 0x90e <__fixunssfsi+0x14>
     91c:	14 c0       	rjmp	.+40     	; 0x946 <__fixunssfsi+0x4c>
     91e:	b1 30       	cpi	r27, 0x01	; 1
     920:	91 f0       	breq	.+36     	; 0x946 <__fixunssfsi+0x4c>
     922:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_zero>
     926:	b1 e0       	ldi	r27, 0x01	; 1
     928:	08 95       	ret
     92a:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_zero>
     92e:	67 2f       	mov	r22, r23
     930:	78 2f       	mov	r23, r24
     932:	88 27       	eor	r24, r24
     934:	b8 5f       	subi	r27, 0xF8	; 248
     936:	39 f0       	breq	.+14     	; 0x946 <__fixunssfsi+0x4c>
     938:	b9 3f       	cpi	r27, 0xF9	; 249
     93a:	cc f3       	brlt	.-14     	; 0x92e <__fixunssfsi+0x34>
     93c:	86 95       	lsr	r24
     93e:	77 95       	ror	r23
     940:	67 95       	ror	r22
     942:	b3 95       	inc	r27
     944:	d9 f7       	brne	.-10     	; 0x93c <__fixunssfsi+0x42>
     946:	3e f4       	brtc	.+14     	; 0x956 <__fixunssfsi+0x5c>
     948:	90 95       	com	r25
     94a:	80 95       	com	r24
     94c:	70 95       	com	r23
     94e:	61 95       	neg	r22
     950:	7f 4f       	sbci	r23, 0xFF	; 255
     952:	8f 4f       	sbci	r24, 0xFF	; 255
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	08 95       	ret

00000958 <__floatunsisf>:
     958:	e8 94       	clt
     95a:	09 c0       	rjmp	.+18     	; 0x96e <__floatsisf+0x12>

0000095c <__floatsisf>:
     95c:	97 fb       	bst	r25, 7
     95e:	3e f4       	brtc	.+14     	; 0x96e <__floatsisf+0x12>
     960:	90 95       	com	r25
     962:	80 95       	com	r24
     964:	70 95       	com	r23
     966:	61 95       	neg	r22
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	8f 4f       	sbci	r24, 0xFF	; 255
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	99 23       	and	r25, r25
     970:	a9 f0       	breq	.+42     	; 0x99c <__floatsisf+0x40>
     972:	f9 2f       	mov	r31, r25
     974:	96 e9       	ldi	r25, 0x96	; 150
     976:	bb 27       	eor	r27, r27
     978:	93 95       	inc	r25
     97a:	f6 95       	lsr	r31
     97c:	87 95       	ror	r24
     97e:	77 95       	ror	r23
     980:	67 95       	ror	r22
     982:	b7 95       	ror	r27
     984:	f1 11       	cpse	r31, r1
     986:	f8 cf       	rjmp	.-16     	; 0x978 <__floatsisf+0x1c>
     988:	fa f4       	brpl	.+62     	; 0x9c8 <__floatsisf+0x6c>
     98a:	bb 0f       	add	r27, r27
     98c:	11 f4       	brne	.+4      	; 0x992 <__floatsisf+0x36>
     98e:	60 ff       	sbrs	r22, 0
     990:	1b c0       	rjmp	.+54     	; 0x9c8 <__floatsisf+0x6c>
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	8f 4f       	sbci	r24, 0xFF	; 255
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__floatsisf+0x6c>
     99c:	88 23       	and	r24, r24
     99e:	11 f0       	breq	.+4      	; 0x9a4 <__floatsisf+0x48>
     9a0:	96 e9       	ldi	r25, 0x96	; 150
     9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__floatsisf+0x6a>
     9a4:	77 23       	and	r23, r23
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <__floatsisf+0x54>
     9a8:	9e e8       	ldi	r25, 0x8E	; 142
     9aa:	87 2f       	mov	r24, r23
     9ac:	76 2f       	mov	r23, r22
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__floatsisf+0x5e>
     9b0:	66 23       	and	r22, r22
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <__floatsisf+0x74>
     9b4:	96 e8       	ldi	r25, 0x86	; 134
     9b6:	86 2f       	mov	r24, r22
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	2a f0       	brmi	.+10     	; 0x9c8 <__floatsisf+0x6c>
     9be:	9a 95       	dec	r25
     9c0:	66 0f       	add	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	88 1f       	adc	r24, r24
     9c6:	da f7       	brpl	.-10     	; 0x9be <__floatsisf+0x62>
     9c8:	88 0f       	add	r24, r24
     9ca:	96 95       	lsr	r25
     9cc:	87 95       	ror	r24
     9ce:	97 f9       	bld	r25, 7
     9d0:	08 95       	ret

000009d2 <__fp_cmp>:
     9d2:	99 0f       	add	r25, r25
     9d4:	00 08       	sbc	r0, r0
     9d6:	55 0f       	add	r21, r21
     9d8:	aa 0b       	sbc	r26, r26
     9da:	e0 e8       	ldi	r30, 0x80	; 128
     9dc:	fe ef       	ldi	r31, 0xFE	; 254
     9de:	16 16       	cp	r1, r22
     9e0:	17 06       	cpc	r1, r23
     9e2:	e8 07       	cpc	r30, r24
     9e4:	f9 07       	cpc	r31, r25
     9e6:	c0 f0       	brcs	.+48     	; 0xa18 <__fp_cmp+0x46>
     9e8:	12 16       	cp	r1, r18
     9ea:	13 06       	cpc	r1, r19
     9ec:	e4 07       	cpc	r30, r20
     9ee:	f5 07       	cpc	r31, r21
     9f0:	98 f0       	brcs	.+38     	; 0xa18 <__fp_cmp+0x46>
     9f2:	62 1b       	sub	r22, r18
     9f4:	73 0b       	sbc	r23, r19
     9f6:	84 0b       	sbc	r24, r20
     9f8:	95 0b       	sbc	r25, r21
     9fa:	39 f4       	brne	.+14     	; 0xa0a <__fp_cmp+0x38>
     9fc:	0a 26       	eor	r0, r26
     9fe:	61 f0       	breq	.+24     	; 0xa18 <__fp_cmp+0x46>
     a00:	23 2b       	or	r18, r19
     a02:	24 2b       	or	r18, r20
     a04:	25 2b       	or	r18, r21
     a06:	21 f4       	brne	.+8      	; 0xa10 <__fp_cmp+0x3e>
     a08:	08 95       	ret
     a0a:	0a 26       	eor	r0, r26
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__fp_cmp+0x3e>
     a0e:	a1 40       	sbci	r26, 0x01	; 1
     a10:	a6 95       	lsr	r26
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	81 1d       	adc	r24, r1
     a16:	81 1d       	adc	r24, r1
     a18:	08 95       	ret

00000a1a <__fp_inf>:
     a1a:	97 f9       	bld	r25, 7
     a1c:	9f 67       	ori	r25, 0x7F	; 127
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	08 95       	ret

00000a26 <__fp_nan>:
     a26:	9f ef       	ldi	r25, 0xFF	; 255
     a28:	80 ec       	ldi	r24, 0xC0	; 192
     a2a:	08 95       	ret

00000a2c <__fp_pscA>:
     a2c:	00 24       	eor	r0, r0
     a2e:	0a 94       	dec	r0
     a30:	16 16       	cp	r1, r22
     a32:	17 06       	cpc	r1, r23
     a34:	18 06       	cpc	r1, r24
     a36:	09 06       	cpc	r0, r25
     a38:	08 95       	ret

00000a3a <__fp_pscB>:
     a3a:	00 24       	eor	r0, r0
     a3c:	0a 94       	dec	r0
     a3e:	12 16       	cp	r1, r18
     a40:	13 06       	cpc	r1, r19
     a42:	14 06       	cpc	r1, r20
     a44:	05 06       	cpc	r0, r21
     a46:	08 95       	ret

00000a48 <__fp_round>:
     a48:	09 2e       	mov	r0, r25
     a4a:	03 94       	inc	r0
     a4c:	00 0c       	add	r0, r0
     a4e:	11 f4       	brne	.+4      	; 0xa54 <__fp_round+0xc>
     a50:	88 23       	and	r24, r24
     a52:	52 f0       	brmi	.+20     	; 0xa68 <__fp_round+0x20>
     a54:	bb 0f       	add	r27, r27
     a56:	40 f4       	brcc	.+16     	; 0xa68 <__fp_round+0x20>
     a58:	bf 2b       	or	r27, r31
     a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_round+0x18>
     a5c:	60 ff       	sbrs	r22, 0
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__fp_round+0x20>
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	8f 4f       	sbci	r24, 0xFF	; 255
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	08 95       	ret

00000a6a <__fp_split3>:
     a6a:	57 fd       	sbrc	r21, 7
     a6c:	90 58       	subi	r25, 0x80	; 128
     a6e:	44 0f       	add	r20, r20
     a70:	55 1f       	adc	r21, r21
     a72:	59 f0       	breq	.+22     	; 0xa8a <__fp_splitA+0x10>
     a74:	5f 3f       	cpi	r21, 0xFF	; 255
     a76:	71 f0       	breq	.+28     	; 0xa94 <__fp_splitA+0x1a>
     a78:	47 95       	ror	r20

00000a7a <__fp_splitA>:
     a7a:	88 0f       	add	r24, r24
     a7c:	97 fb       	bst	r25, 7
     a7e:	99 1f       	adc	r25, r25
     a80:	61 f0       	breq	.+24     	; 0xa9a <__fp_splitA+0x20>
     a82:	9f 3f       	cpi	r25, 0xFF	; 255
     a84:	79 f0       	breq	.+30     	; 0xaa4 <__fp_splitA+0x2a>
     a86:	87 95       	ror	r24
     a88:	08 95       	ret
     a8a:	12 16       	cp	r1, r18
     a8c:	13 06       	cpc	r1, r19
     a8e:	14 06       	cpc	r1, r20
     a90:	55 1f       	adc	r21, r21
     a92:	f2 cf       	rjmp	.-28     	; 0xa78 <__fp_split3+0xe>
     a94:	46 95       	lsr	r20
     a96:	f1 df       	rcall	.-30     	; 0xa7a <__fp_splitA>
     a98:	08 c0       	rjmp	.+16     	; 0xaaa <__fp_splitA+0x30>
     a9a:	16 16       	cp	r1, r22
     a9c:	17 06       	cpc	r1, r23
     a9e:	18 06       	cpc	r1, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	f1 cf       	rjmp	.-30     	; 0xa86 <__fp_splitA+0xc>
     aa4:	86 95       	lsr	r24
     aa6:	71 05       	cpc	r23, r1
     aa8:	61 05       	cpc	r22, r1
     aaa:	08 94       	sec
     aac:	08 95       	ret

00000aae <__fp_zero>:
     aae:	e8 94       	clt

00000ab0 <__fp_szero>:
     ab0:	bb 27       	eor	r27, r27
     ab2:	66 27       	eor	r22, r22
     ab4:	77 27       	eor	r23, r23
     ab6:	cb 01       	movw	r24, r22
     ab8:	97 f9       	bld	r25, 7
     aba:	08 95       	ret

00000abc <__gesf2>:
     abc:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_cmp>
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <__gesf2+0x8>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	08 95       	ret

00000ac6 <__mulsf3>:
     ac6:	0e 94 76 05 	call	0xaec	; 0xaec <__mulsf3x>
     aca:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_round>
     ace:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscA>
     ad2:	38 f0       	brcs	.+14     	; 0xae2 <__mulsf3+0x1c>
     ad4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_pscB>
     ad8:	20 f0       	brcs	.+8      	; 0xae2 <__mulsf3+0x1c>
     ada:	95 23       	and	r25, r21
     adc:	11 f0       	breq	.+4      	; 0xae2 <__mulsf3+0x1c>
     ade:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>
     ae2:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_nan>
     ae6:	11 24       	eor	r1, r1
     ae8:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_szero>

00000aec <__mulsf3x>:
     aec:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_split3>
     af0:	70 f3       	brcs	.-36     	; 0xace <__mulsf3+0x8>

00000af2 <__mulsf3_pse>:
     af2:	95 9f       	mul	r25, r21
     af4:	c1 f3       	breq	.-16     	; 0xae6 <__mulsf3+0x20>
     af6:	95 0f       	add	r25, r21
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	55 1f       	adc	r21, r21
     afc:	62 9f       	mul	r22, r18
     afe:	f0 01       	movw	r30, r0
     b00:	72 9f       	mul	r23, r18
     b02:	bb 27       	eor	r27, r27
     b04:	f0 0d       	add	r31, r0
     b06:	b1 1d       	adc	r27, r1
     b08:	63 9f       	mul	r22, r19
     b0a:	aa 27       	eor	r26, r26
     b0c:	f0 0d       	add	r31, r0
     b0e:	b1 1d       	adc	r27, r1
     b10:	aa 1f       	adc	r26, r26
     b12:	64 9f       	mul	r22, r20
     b14:	66 27       	eor	r22, r22
     b16:	b0 0d       	add	r27, r0
     b18:	a1 1d       	adc	r26, r1
     b1a:	66 1f       	adc	r22, r22
     b1c:	82 9f       	mul	r24, r18
     b1e:	22 27       	eor	r18, r18
     b20:	b0 0d       	add	r27, r0
     b22:	a1 1d       	adc	r26, r1
     b24:	62 1f       	adc	r22, r18
     b26:	73 9f       	mul	r23, r19
     b28:	b0 0d       	add	r27, r0
     b2a:	a1 1d       	adc	r26, r1
     b2c:	62 1f       	adc	r22, r18
     b2e:	83 9f       	mul	r24, r19
     b30:	a0 0d       	add	r26, r0
     b32:	61 1d       	adc	r22, r1
     b34:	22 1f       	adc	r18, r18
     b36:	74 9f       	mul	r23, r20
     b38:	33 27       	eor	r19, r19
     b3a:	a0 0d       	add	r26, r0
     b3c:	61 1d       	adc	r22, r1
     b3e:	23 1f       	adc	r18, r19
     b40:	84 9f       	mul	r24, r20
     b42:	60 0d       	add	r22, r0
     b44:	21 1d       	adc	r18, r1
     b46:	82 2f       	mov	r24, r18
     b48:	76 2f       	mov	r23, r22
     b4a:	6a 2f       	mov	r22, r26
     b4c:	11 24       	eor	r1, r1
     b4e:	9f 57       	subi	r25, 0x7F	; 127
     b50:	50 40       	sbci	r21, 0x00	; 0
     b52:	9a f0       	brmi	.+38     	; 0xb7a <__mulsf3_pse+0x88>
     b54:	f1 f0       	breq	.+60     	; 0xb92 <__mulsf3_pse+0xa0>
     b56:	88 23       	and	r24, r24
     b58:	4a f0       	brmi	.+18     	; 0xb6c <__mulsf3_pse+0x7a>
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	bb 1f       	adc	r27, r27
     b60:	66 1f       	adc	r22, r22
     b62:	77 1f       	adc	r23, r23
     b64:	88 1f       	adc	r24, r24
     b66:	91 50       	subi	r25, 0x01	; 1
     b68:	50 40       	sbci	r21, 0x00	; 0
     b6a:	a9 f7       	brne	.-22     	; 0xb56 <__mulsf3_pse+0x64>
     b6c:	9e 3f       	cpi	r25, 0xFE	; 254
     b6e:	51 05       	cpc	r21, r1
     b70:	80 f0       	brcs	.+32     	; 0xb92 <__mulsf3_pse+0xa0>
     b72:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>
     b76:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_szero>
     b7a:	5f 3f       	cpi	r21, 0xFF	; 255
     b7c:	e4 f3       	brlt	.-8      	; 0xb76 <__mulsf3_pse+0x84>
     b7e:	98 3e       	cpi	r25, 0xE8	; 232
     b80:	d4 f3       	brlt	.-12     	; 0xb76 <__mulsf3_pse+0x84>
     b82:	86 95       	lsr	r24
     b84:	77 95       	ror	r23
     b86:	67 95       	ror	r22
     b88:	b7 95       	ror	r27
     b8a:	f7 95       	ror	r31
     b8c:	e7 95       	ror	r30
     b8e:	9f 5f       	subi	r25, 0xFF	; 255
     b90:	c1 f7       	brne	.-16     	; 0xb82 <__mulsf3_pse+0x90>
     b92:	fe 2b       	or	r31, r30
     b94:	88 0f       	add	r24, r24
     b96:	91 1d       	adc	r25, r1
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	97 f9       	bld	r25, 7
     b9e:	08 95       	ret

00000ba0 <strncat>:
     ba0:	fb 01       	movw	r30, r22
     ba2:	dc 01       	movw	r26, r24
     ba4:	0d 90       	ld	r0, X+
     ba6:	00 20       	and	r0, r0
     ba8:	e9 f7       	brne	.-6      	; 0xba4 <strncat+0x4>
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	41 50       	subi	r20, 0x01	; 1
     bae:	50 40       	sbci	r21, 0x00	; 0
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <strncat+0x1c>
     bb2:	01 90       	ld	r0, Z+
     bb4:	00 20       	and	r0, r0
     bb6:	0d 92       	st	X+, r0
     bb8:	c9 f7       	brne	.-14     	; 0xbac <strncat+0xc>
     bba:	08 95       	ret
     bbc:	1c 92       	st	X, r1
     bbe:	08 95       	ret

00000bc0 <sprintf>:
     bc0:	ae e0       	ldi	r26, 0x0E	; 14
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 ee       	ldi	r30, 0xE6	; 230
     bc6:	f5 e0       	ldi	r31, 0x05	; 5
     bc8:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__prologue_saves__+0x1c>
     bcc:	0d 89       	ldd	r16, Y+21	; 0x15
     bce:	1e 89       	ldd	r17, Y+22	; 0x16
     bd0:	86 e0       	ldi	r24, 0x06	; 6
     bd2:	8c 83       	std	Y+4, r24	; 0x04
     bd4:	1a 83       	std	Y+2, r17	; 0x02
     bd6:	09 83       	std	Y+1, r16	; 0x01
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	9f e7       	ldi	r25, 0x7F	; 127
     bdc:	9e 83       	std	Y+6, r25	; 0x06
     bde:	8d 83       	std	Y+5, r24	; 0x05
     be0:	ae 01       	movw	r20, r28
     be2:	47 5e       	subi	r20, 0xE7	; 231
     be4:	5f 4f       	sbci	r21, 0xFF	; 255
     be6:	6f 89       	ldd	r22, Y+23	; 0x17
     be8:	78 8d       	ldd	r23, Y+24	; 0x18
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 02 06 	call	0xc04	; 0xc04 <vfprintf>
     bf2:	ef 81       	ldd	r30, Y+7	; 0x07
     bf4:	f8 85       	ldd	r31, Y+8	; 0x08
     bf6:	e0 0f       	add	r30, r16
     bf8:	f1 1f       	adc	r31, r17
     bfa:	10 82       	st	Z, r1
     bfc:	2e 96       	adiw	r28, 0x0e	; 14
     bfe:	e4 e0       	ldi	r30, 0x04	; 4
     c00:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__epilogue_restores__+0x1c>

00000c04 <vfprintf>:
     c04:	ab e0       	ldi	r26, 0x0B	; 11
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e0       	ldi	r30, 0x08	; 8
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__prologue_saves__>
     c10:	6c 01       	movw	r12, r24
     c12:	7b 01       	movw	r14, r22
     c14:	8a 01       	movw	r16, r20
     c16:	fc 01       	movw	r30, r24
     c18:	17 82       	std	Z+7, r1	; 0x07
     c1a:	16 82       	std	Z+6, r1	; 0x06
     c1c:	83 81       	ldd	r24, Z+3	; 0x03
     c1e:	81 ff       	sbrs	r24, 1
     c20:	cc c1       	rjmp	.+920    	; 0xfba <vfprintf+0x3b6>
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	3c 01       	movw	r6, r24
     c28:	f6 01       	movw	r30, r12
     c2a:	93 81       	ldd	r25, Z+3	; 0x03
     c2c:	f7 01       	movw	r30, r14
     c2e:	93 fd       	sbrc	r25, 3
     c30:	85 91       	lpm	r24, Z+
     c32:	93 ff       	sbrs	r25, 3
     c34:	81 91       	ld	r24, Z+
     c36:	7f 01       	movw	r14, r30
     c38:	88 23       	and	r24, r24
     c3a:	09 f4       	brne	.+2      	; 0xc3e <vfprintf+0x3a>
     c3c:	ba c1       	rjmp	.+884    	; 0xfb2 <vfprintf+0x3ae>
     c3e:	85 32       	cpi	r24, 0x25	; 37
     c40:	39 f4       	brne	.+14     	; 0xc50 <vfprintf+0x4c>
     c42:	93 fd       	sbrc	r25, 3
     c44:	85 91       	lpm	r24, Z+
     c46:	93 ff       	sbrs	r25, 3
     c48:	81 91       	ld	r24, Z+
     c4a:	7f 01       	movw	r14, r30
     c4c:	85 32       	cpi	r24, 0x25	; 37
     c4e:	29 f4       	brne	.+10     	; 0xc5a <vfprintf+0x56>
     c50:	b6 01       	movw	r22, r12
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     c58:	e7 cf       	rjmp	.-50     	; 0xc28 <vfprintf+0x24>
     c5a:	91 2c       	mov	r9, r1
     c5c:	21 2c       	mov	r2, r1
     c5e:	31 2c       	mov	r3, r1
     c60:	ff e1       	ldi	r31, 0x1F	; 31
     c62:	f3 15       	cp	r31, r3
     c64:	d8 f0       	brcs	.+54     	; 0xc9c <vfprintf+0x98>
     c66:	8b 32       	cpi	r24, 0x2B	; 43
     c68:	79 f0       	breq	.+30     	; 0xc88 <vfprintf+0x84>
     c6a:	38 f4       	brcc	.+14     	; 0xc7a <vfprintf+0x76>
     c6c:	80 32       	cpi	r24, 0x20	; 32
     c6e:	79 f0       	breq	.+30     	; 0xc8e <vfprintf+0x8a>
     c70:	83 32       	cpi	r24, 0x23	; 35
     c72:	a1 f4       	brne	.+40     	; 0xc9c <vfprintf+0x98>
     c74:	23 2d       	mov	r18, r3
     c76:	20 61       	ori	r18, 0x10	; 16
     c78:	1d c0       	rjmp	.+58     	; 0xcb4 <vfprintf+0xb0>
     c7a:	8d 32       	cpi	r24, 0x2D	; 45
     c7c:	61 f0       	breq	.+24     	; 0xc96 <vfprintf+0x92>
     c7e:	80 33       	cpi	r24, 0x30	; 48
     c80:	69 f4       	brne	.+26     	; 0xc9c <vfprintf+0x98>
     c82:	23 2d       	mov	r18, r3
     c84:	21 60       	ori	r18, 0x01	; 1
     c86:	16 c0       	rjmp	.+44     	; 0xcb4 <vfprintf+0xb0>
     c88:	83 2d       	mov	r24, r3
     c8a:	82 60       	ori	r24, 0x02	; 2
     c8c:	38 2e       	mov	r3, r24
     c8e:	e3 2d       	mov	r30, r3
     c90:	e4 60       	ori	r30, 0x04	; 4
     c92:	3e 2e       	mov	r3, r30
     c94:	2a c0       	rjmp	.+84     	; 0xcea <vfprintf+0xe6>
     c96:	f3 2d       	mov	r31, r3
     c98:	f8 60       	ori	r31, 0x08	; 8
     c9a:	1d c0       	rjmp	.+58     	; 0xcd6 <vfprintf+0xd2>
     c9c:	37 fc       	sbrc	r3, 7
     c9e:	2d c0       	rjmp	.+90     	; 0xcfa <vfprintf+0xf6>
     ca0:	20 ed       	ldi	r18, 0xD0	; 208
     ca2:	28 0f       	add	r18, r24
     ca4:	2a 30       	cpi	r18, 0x0A	; 10
     ca6:	40 f0       	brcs	.+16     	; 0xcb8 <vfprintf+0xb4>
     ca8:	8e 32       	cpi	r24, 0x2E	; 46
     caa:	b9 f4       	brne	.+46     	; 0xcda <vfprintf+0xd6>
     cac:	36 fc       	sbrc	r3, 6
     cae:	81 c1       	rjmp	.+770    	; 0xfb2 <vfprintf+0x3ae>
     cb0:	23 2d       	mov	r18, r3
     cb2:	20 64       	ori	r18, 0x40	; 64
     cb4:	32 2e       	mov	r3, r18
     cb6:	19 c0       	rjmp	.+50     	; 0xcea <vfprintf+0xe6>
     cb8:	36 fe       	sbrs	r3, 6
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <vfprintf+0xc4>
     cbc:	8a e0       	ldi	r24, 0x0A	; 10
     cbe:	98 9e       	mul	r9, r24
     cc0:	20 0d       	add	r18, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	92 2e       	mov	r9, r18
     cc6:	11 c0       	rjmp	.+34     	; 0xcea <vfprintf+0xe6>
     cc8:	ea e0       	ldi	r30, 0x0A	; 10
     cca:	2e 9e       	mul	r2, r30
     ccc:	20 0d       	add	r18, r0
     cce:	11 24       	eor	r1, r1
     cd0:	22 2e       	mov	r2, r18
     cd2:	f3 2d       	mov	r31, r3
     cd4:	f0 62       	ori	r31, 0x20	; 32
     cd6:	3f 2e       	mov	r3, r31
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <vfprintf+0xe6>
     cda:	8c 36       	cpi	r24, 0x6C	; 108
     cdc:	21 f4       	brne	.+8      	; 0xce6 <vfprintf+0xe2>
     cde:	83 2d       	mov	r24, r3
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	38 2e       	mov	r3, r24
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <vfprintf+0xe6>
     ce6:	88 36       	cpi	r24, 0x68	; 104
     ce8:	41 f4       	brne	.+16     	; 0xcfa <vfprintf+0xf6>
     cea:	f7 01       	movw	r30, r14
     cec:	93 fd       	sbrc	r25, 3
     cee:	85 91       	lpm	r24, Z+
     cf0:	93 ff       	sbrs	r25, 3
     cf2:	81 91       	ld	r24, Z+
     cf4:	7f 01       	movw	r14, r30
     cf6:	81 11       	cpse	r24, r1
     cf8:	b3 cf       	rjmp	.-154    	; 0xc60 <vfprintf+0x5c>
     cfa:	98 2f       	mov	r25, r24
     cfc:	9f 7d       	andi	r25, 0xDF	; 223
     cfe:	95 54       	subi	r25, 0x45	; 69
     d00:	93 30       	cpi	r25, 0x03	; 3
     d02:	28 f4       	brcc	.+10     	; 0xd0e <vfprintf+0x10a>
     d04:	0c 5f       	subi	r16, 0xFC	; 252
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	9f e3       	ldi	r25, 0x3F	; 63
     d0a:	99 83       	std	Y+1, r25	; 0x01
     d0c:	0d c0       	rjmp	.+26     	; 0xd28 <vfprintf+0x124>
     d0e:	83 36       	cpi	r24, 0x63	; 99
     d10:	31 f0       	breq	.+12     	; 0xd1e <vfprintf+0x11a>
     d12:	83 37       	cpi	r24, 0x73	; 115
     d14:	71 f0       	breq	.+28     	; 0xd32 <vfprintf+0x12e>
     d16:	83 35       	cpi	r24, 0x53	; 83
     d18:	09 f0       	breq	.+2      	; 0xd1c <vfprintf+0x118>
     d1a:	59 c0       	rjmp	.+178    	; 0xdce <vfprintf+0x1ca>
     d1c:	21 c0       	rjmp	.+66     	; 0xd60 <vfprintf+0x15c>
     d1e:	f8 01       	movw	r30, r16
     d20:	80 81       	ld	r24, Z
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	0e 5f       	subi	r16, 0xFE	; 254
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	88 24       	eor	r8, r8
     d2a:	83 94       	inc	r8
     d2c:	91 2c       	mov	r9, r1
     d2e:	53 01       	movw	r10, r6
     d30:	13 c0       	rjmp	.+38     	; 0xd58 <vfprintf+0x154>
     d32:	28 01       	movw	r4, r16
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	4f 0e       	add	r4, r31
     d38:	51 1c       	adc	r5, r1
     d3a:	f8 01       	movw	r30, r16
     d3c:	a0 80       	ld	r10, Z
     d3e:	b1 80       	ldd	r11, Z+1	; 0x01
     d40:	36 fe       	sbrs	r3, 6
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <vfprintf+0x146>
     d44:	69 2d       	mov	r22, r9
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x14a>
     d4a:	6f ef       	ldi	r22, 0xFF	; 255
     d4c:	7f ef       	ldi	r23, 0xFF	; 255
     d4e:	c5 01       	movw	r24, r10
     d50:	0e 94 ee 07 	call	0xfdc	; 0xfdc <strnlen>
     d54:	4c 01       	movw	r8, r24
     d56:	82 01       	movw	r16, r4
     d58:	f3 2d       	mov	r31, r3
     d5a:	ff 77       	andi	r31, 0x7F	; 127
     d5c:	3f 2e       	mov	r3, r31
     d5e:	16 c0       	rjmp	.+44     	; 0xd8c <vfprintf+0x188>
     d60:	28 01       	movw	r4, r16
     d62:	22 e0       	ldi	r18, 0x02	; 2
     d64:	42 0e       	add	r4, r18
     d66:	51 1c       	adc	r5, r1
     d68:	f8 01       	movw	r30, r16
     d6a:	a0 80       	ld	r10, Z
     d6c:	b1 80       	ldd	r11, Z+1	; 0x01
     d6e:	36 fe       	sbrs	r3, 6
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <vfprintf+0x174>
     d72:	69 2d       	mov	r22, r9
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x178>
     d78:	6f ef       	ldi	r22, 0xFF	; 255
     d7a:	7f ef       	ldi	r23, 0xFF	; 255
     d7c:	c5 01       	movw	r24, r10
     d7e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strnlen_P>
     d82:	4c 01       	movw	r8, r24
     d84:	f3 2d       	mov	r31, r3
     d86:	f0 68       	ori	r31, 0x80	; 128
     d88:	3f 2e       	mov	r3, r31
     d8a:	82 01       	movw	r16, r4
     d8c:	33 fc       	sbrc	r3, 3
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <vfprintf+0x1c2>
     d90:	82 2d       	mov	r24, r2
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	88 16       	cp	r8, r24
     d96:	99 06       	cpc	r9, r25
     d98:	b0 f4       	brcc	.+44     	; 0xdc6 <vfprintf+0x1c2>
     d9a:	b6 01       	movw	r22, r12
     d9c:	80 e2       	ldi	r24, 0x20	; 32
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     da4:	2a 94       	dec	r2
     da6:	f4 cf       	rjmp	.-24     	; 0xd90 <vfprintf+0x18c>
     da8:	f5 01       	movw	r30, r10
     daa:	37 fc       	sbrc	r3, 7
     dac:	85 91       	lpm	r24, Z+
     dae:	37 fe       	sbrs	r3, 7
     db0:	81 91       	ld	r24, Z+
     db2:	5f 01       	movw	r10, r30
     db4:	b6 01       	movw	r22, r12
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     dbc:	21 10       	cpse	r2, r1
     dbe:	2a 94       	dec	r2
     dc0:	21 e0       	ldi	r18, 0x01	; 1
     dc2:	82 1a       	sub	r8, r18
     dc4:	91 08       	sbc	r9, r1
     dc6:	81 14       	cp	r8, r1
     dc8:	91 04       	cpc	r9, r1
     dca:	71 f7       	brne	.-36     	; 0xda8 <vfprintf+0x1a4>
     dcc:	e8 c0       	rjmp	.+464    	; 0xf9e <vfprintf+0x39a>
     dce:	84 36       	cpi	r24, 0x64	; 100
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <vfprintf+0x1d2>
     dd2:	89 36       	cpi	r24, 0x69	; 105
     dd4:	41 f5       	brne	.+80     	; 0xe26 <vfprintf+0x222>
     dd6:	f8 01       	movw	r30, r16
     dd8:	37 fe       	sbrs	r3, 7
     dda:	07 c0       	rjmp	.+14     	; 0xdea <vfprintf+0x1e6>
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	0c 5f       	subi	r16, 0xFC	; 252
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	08 c0       	rjmp	.+16     	; 0xdfa <vfprintf+0x1f6>
     dea:	60 81       	ld	r22, Z
     dec:	71 81       	ldd	r23, Z+1	; 0x01
     dee:	07 2e       	mov	r0, r23
     df0:	00 0c       	add	r0, r0
     df2:	88 0b       	sbc	r24, r24
     df4:	99 0b       	sbc	r25, r25
     df6:	0e 5f       	subi	r16, 0xFE	; 254
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	f3 2d       	mov	r31, r3
     dfc:	ff 76       	andi	r31, 0x6F	; 111
     dfe:	3f 2e       	mov	r3, r31
     e00:	97 ff       	sbrs	r25, 7
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <vfprintf+0x212>
     e04:	90 95       	com	r25
     e06:	80 95       	com	r24
     e08:	70 95       	com	r23
     e0a:	61 95       	neg	r22
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	f0 68       	ori	r31, 0x80	; 128
     e14:	3f 2e       	mov	r3, r31
     e16:	2a e0       	ldi	r18, 0x0A	; 10
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	a3 01       	movw	r20, r6
     e1c:	0e 94 35 08 	call	0x106a	; 0x106a <__ultoa_invert>
     e20:	88 2e       	mov	r8, r24
     e22:	86 18       	sub	r8, r6
     e24:	45 c0       	rjmp	.+138    	; 0xeb0 <vfprintf+0x2ac>
     e26:	85 37       	cpi	r24, 0x75	; 117
     e28:	31 f4       	brne	.+12     	; 0xe36 <vfprintf+0x232>
     e2a:	23 2d       	mov	r18, r3
     e2c:	2f 7e       	andi	r18, 0xEF	; 239
     e2e:	b2 2e       	mov	r11, r18
     e30:	2a e0       	ldi	r18, 0x0A	; 10
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	25 c0       	rjmp	.+74     	; 0xe80 <vfprintf+0x27c>
     e36:	93 2d       	mov	r25, r3
     e38:	99 7f       	andi	r25, 0xF9	; 249
     e3a:	b9 2e       	mov	r11, r25
     e3c:	8f 36       	cpi	r24, 0x6F	; 111
     e3e:	c1 f0       	breq	.+48     	; 0xe70 <vfprintf+0x26c>
     e40:	18 f4       	brcc	.+6      	; 0xe48 <vfprintf+0x244>
     e42:	88 35       	cpi	r24, 0x58	; 88
     e44:	79 f0       	breq	.+30     	; 0xe64 <vfprintf+0x260>
     e46:	b5 c0       	rjmp	.+362    	; 0xfb2 <vfprintf+0x3ae>
     e48:	80 37       	cpi	r24, 0x70	; 112
     e4a:	19 f0       	breq	.+6      	; 0xe52 <vfprintf+0x24e>
     e4c:	88 37       	cpi	r24, 0x78	; 120
     e4e:	21 f0       	breq	.+8      	; 0xe58 <vfprintf+0x254>
     e50:	b0 c0       	rjmp	.+352    	; 0xfb2 <vfprintf+0x3ae>
     e52:	e9 2f       	mov	r30, r25
     e54:	e0 61       	ori	r30, 0x10	; 16
     e56:	be 2e       	mov	r11, r30
     e58:	b4 fe       	sbrs	r11, 4
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <vfprintf+0x272>
     e5c:	fb 2d       	mov	r31, r11
     e5e:	f4 60       	ori	r31, 0x04	; 4
     e60:	bf 2e       	mov	r11, r31
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <vfprintf+0x272>
     e64:	34 fe       	sbrs	r3, 4
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <vfprintf+0x278>
     e68:	29 2f       	mov	r18, r25
     e6a:	26 60       	ori	r18, 0x06	; 6
     e6c:	b2 2e       	mov	r11, r18
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <vfprintf+0x278>
     e70:	28 e0       	ldi	r18, 0x08	; 8
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <vfprintf+0x27c>
     e76:	20 e1       	ldi	r18, 0x10	; 16
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x27c>
     e7c:	20 e1       	ldi	r18, 0x10	; 16
     e7e:	32 e0       	ldi	r19, 0x02	; 2
     e80:	f8 01       	movw	r30, r16
     e82:	b7 fe       	sbrs	r11, 7
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <vfprintf+0x290>
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	0c 5f       	subi	r16, 0xFC	; 252
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x29c>
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 5f       	subi	r16, 0xFE	; 254
     e9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ea0:	a3 01       	movw	r20, r6
     ea2:	0e 94 35 08 	call	0x106a	; 0x106a <__ultoa_invert>
     ea6:	88 2e       	mov	r8, r24
     ea8:	86 18       	sub	r8, r6
     eaa:	fb 2d       	mov	r31, r11
     eac:	ff 77       	andi	r31, 0x7F	; 127
     eae:	3f 2e       	mov	r3, r31
     eb0:	36 fe       	sbrs	r3, 6
     eb2:	0d c0       	rjmp	.+26     	; 0xece <vfprintf+0x2ca>
     eb4:	23 2d       	mov	r18, r3
     eb6:	2e 7f       	andi	r18, 0xFE	; 254
     eb8:	a2 2e       	mov	r10, r18
     eba:	89 14       	cp	r8, r9
     ebc:	58 f4       	brcc	.+22     	; 0xed4 <vfprintf+0x2d0>
     ebe:	34 fe       	sbrs	r3, 4
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <vfprintf+0x2d4>
     ec2:	32 fc       	sbrc	r3, 2
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <vfprintf+0x2d4>
     ec6:	83 2d       	mov	r24, r3
     ec8:	8e 7e       	andi	r24, 0xEE	; 238
     eca:	a8 2e       	mov	r10, r24
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <vfprintf+0x2d4>
     ece:	b8 2c       	mov	r11, r8
     ed0:	a3 2c       	mov	r10, r3
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x2d6>
     ed4:	b8 2c       	mov	r11, r8
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <vfprintf+0x2d6>
     ed8:	b9 2c       	mov	r11, r9
     eda:	a4 fe       	sbrs	r10, 4
     edc:	0f c0       	rjmp	.+30     	; 0xefc <vfprintf+0x2f8>
     ede:	fe 01       	movw	r30, r28
     ee0:	e8 0d       	add	r30, r8
     ee2:	f1 1d       	adc	r31, r1
     ee4:	80 81       	ld	r24, Z
     ee6:	80 33       	cpi	r24, 0x30	; 48
     ee8:	21 f4       	brne	.+8      	; 0xef2 <vfprintf+0x2ee>
     eea:	9a 2d       	mov	r25, r10
     eec:	99 7e       	andi	r25, 0xE9	; 233
     eee:	a9 2e       	mov	r10, r25
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <vfprintf+0x300>
     ef2:	a2 fe       	sbrs	r10, 2
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <vfprintf+0x2fe>
     ef6:	b3 94       	inc	r11
     ef8:	b3 94       	inc	r11
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <vfprintf+0x300>
     efc:	8a 2d       	mov	r24, r10
     efe:	86 78       	andi	r24, 0x86	; 134
     f00:	09 f0       	breq	.+2      	; 0xf04 <vfprintf+0x300>
     f02:	b3 94       	inc	r11
     f04:	a3 fc       	sbrc	r10, 3
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <vfprintf+0x326>
     f08:	a0 fe       	sbrs	r10, 0
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <vfprintf+0x314>
     f0c:	b2 14       	cp	r11, r2
     f0e:	88 f4       	brcc	.+34     	; 0xf32 <vfprintf+0x32e>
     f10:	28 0c       	add	r2, r8
     f12:	92 2c       	mov	r9, r2
     f14:	9b 18       	sub	r9, r11
     f16:	0e c0       	rjmp	.+28     	; 0xf34 <vfprintf+0x330>
     f18:	b2 14       	cp	r11, r2
     f1a:	60 f4       	brcc	.+24     	; 0xf34 <vfprintf+0x330>
     f1c:	b6 01       	movw	r22, r12
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     f26:	b3 94       	inc	r11
     f28:	f7 cf       	rjmp	.-18     	; 0xf18 <vfprintf+0x314>
     f2a:	b2 14       	cp	r11, r2
     f2c:	18 f4       	brcc	.+6      	; 0xf34 <vfprintf+0x330>
     f2e:	2b 18       	sub	r2, r11
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0x332>
     f32:	98 2c       	mov	r9, r8
     f34:	21 2c       	mov	r2, r1
     f36:	a4 fe       	sbrs	r10, 4
     f38:	10 c0       	rjmp	.+32     	; 0xf5a <vfprintf+0x356>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     f44:	a2 fe       	sbrs	r10, 2
     f46:	17 c0       	rjmp	.+46     	; 0xf76 <vfprintf+0x372>
     f48:	a1 fc       	sbrc	r10, 1
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <vfprintf+0x34e>
     f4c:	88 e7       	ldi	r24, 0x78	; 120
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x352>
     f52:	88 e5       	ldi	r24, 0x58	; 88
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	b6 01       	movw	r22, r12
     f58:	0c c0       	rjmp	.+24     	; 0xf72 <vfprintf+0x36e>
     f5a:	8a 2d       	mov	r24, r10
     f5c:	86 78       	andi	r24, 0x86	; 134
     f5e:	59 f0       	breq	.+22     	; 0xf76 <vfprintf+0x372>
     f60:	a1 fe       	sbrs	r10, 1
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <vfprintf+0x364>
     f64:	8b e2       	ldi	r24, 0x2B	; 43
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <vfprintf+0x366>
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	a7 fc       	sbrc	r10, 7
     f6c:	8d e2       	ldi	r24, 0x2D	; 45
     f6e:	b6 01       	movw	r22, r12
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     f76:	89 14       	cp	r8, r9
     f78:	38 f4       	brcc	.+14     	; 0xf88 <vfprintf+0x384>
     f7a:	b6 01       	movw	r22, r12
     f7c:	80 e3       	ldi	r24, 0x30	; 48
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     f84:	9a 94       	dec	r9
     f86:	f7 cf       	rjmp	.-18     	; 0xf76 <vfprintf+0x372>
     f88:	8a 94       	dec	r8
     f8a:	f3 01       	movw	r30, r6
     f8c:	e8 0d       	add	r30, r8
     f8e:	f1 1d       	adc	r31, r1
     f90:	80 81       	ld	r24, Z
     f92:	b6 01       	movw	r22, r12
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     f9a:	81 10       	cpse	r8, r1
     f9c:	f5 cf       	rjmp	.-22     	; 0xf88 <vfprintf+0x384>
     f9e:	22 20       	and	r2, r2
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <vfprintf+0x3a0>
     fa2:	42 ce       	rjmp	.-892    	; 0xc28 <vfprintf+0x24>
     fa4:	b6 01       	movw	r22, r12
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 f9 07 	call	0xff2	; 0xff2 <fputc>
     fae:	2a 94       	dec	r2
     fb0:	f6 cf       	rjmp	.-20     	; 0xf9e <vfprintf+0x39a>
     fb2:	f6 01       	movw	r30, r12
     fb4:	86 81       	ldd	r24, Z+6	; 0x06
     fb6:	97 81       	ldd	r25, Z+7	; 0x07
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x3ba>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	2b 96       	adiw	r28, 0x0b	; 11
     fc0:	e2 e1       	ldi	r30, 0x12	; 18
     fc2:	0c 94 af 08 	jmp	0x115e	; 0x115e <__epilogue_restores__>

00000fc6 <strnlen_P>:
     fc6:	fc 01       	movw	r30, r24
     fc8:	05 90       	lpm	r0, Z+
     fca:	61 50       	subi	r22, 0x01	; 1
     fcc:	70 40       	sbci	r23, 0x00	; 0
     fce:	01 10       	cpse	r0, r1
     fd0:	d8 f7       	brcc	.-10     	; 0xfc8 <strnlen_P+0x2>
     fd2:	80 95       	com	r24
     fd4:	90 95       	com	r25
     fd6:	8e 0f       	add	r24, r30
     fd8:	9f 1f       	adc	r25, r31
     fda:	08 95       	ret

00000fdc <strnlen>:
     fdc:	fc 01       	movw	r30, r24
     fde:	61 50       	subi	r22, 0x01	; 1
     fe0:	70 40       	sbci	r23, 0x00	; 0
     fe2:	01 90       	ld	r0, Z+
     fe4:	01 10       	cpse	r0, r1
     fe6:	d8 f7       	brcc	.-10     	; 0xfde <strnlen+0x2>
     fe8:	80 95       	com	r24
     fea:	90 95       	com	r25
     fec:	8e 0f       	add	r24, r30
     fee:	9f 1f       	adc	r25, r31
     ff0:	08 95       	ret

00000ff2 <fputc>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	fb 01       	movw	r30, r22
     ffc:	23 81       	ldd	r18, Z+3	; 0x03
     ffe:	21 fd       	sbrc	r18, 1
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <fputc+0x16>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	2c c0       	rjmp	.+88     	; 0x1060 <fputc+0x6e>
    1008:	22 ff       	sbrs	r18, 2
    100a:	16 c0       	rjmp	.+44     	; 0x1038 <fputc+0x46>
    100c:	46 81       	ldd	r20, Z+6	; 0x06
    100e:	57 81       	ldd	r21, Z+7	; 0x07
    1010:	24 81       	ldd	r18, Z+4	; 0x04
    1012:	35 81       	ldd	r19, Z+5	; 0x05
    1014:	42 17       	cp	r20, r18
    1016:	53 07       	cpc	r21, r19
    1018:	44 f4       	brge	.+16     	; 0x102a <fputc+0x38>
    101a:	a0 81       	ld	r26, Z
    101c:	b1 81       	ldd	r27, Z+1	; 0x01
    101e:	9d 01       	movw	r18, r26
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	31 83       	std	Z+1, r19	; 0x01
    1026:	20 83       	st	Z, r18
    1028:	8c 93       	st	X, r24
    102a:	26 81       	ldd	r18, Z+6	; 0x06
    102c:	37 81       	ldd	r19, Z+7	; 0x07
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	37 83       	std	Z+7, r19	; 0x07
    1034:	26 83       	std	Z+6, r18	; 0x06
    1036:	14 c0       	rjmp	.+40     	; 0x1060 <fputc+0x6e>
    1038:	8b 01       	movw	r16, r22
    103a:	ec 01       	movw	r28, r24
    103c:	fb 01       	movw	r30, r22
    103e:	00 84       	ldd	r0, Z+8	; 0x08
    1040:	f1 85       	ldd	r31, Z+9	; 0x09
    1042:	e0 2d       	mov	r30, r0
    1044:	09 95       	icall
    1046:	89 2b       	or	r24, r25
    1048:	e1 f6       	brne	.-72     	; 0x1002 <fputc+0x10>
    104a:	d8 01       	movw	r26, r16
    104c:	16 96       	adiw	r26, 0x06	; 6
    104e:	8d 91       	ld	r24, X+
    1050:	9c 91       	ld	r25, X
    1052:	17 97       	sbiw	r26, 0x07	; 7
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	17 96       	adiw	r26, 0x07	; 7
    1058:	9c 93       	st	X, r25
    105a:	8e 93       	st	-X, r24
    105c:	16 97       	sbiw	r26, 0x06	; 6
    105e:	ce 01       	movw	r24, r28
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <__ultoa_invert>:
    106a:	fa 01       	movw	r30, r20
    106c:	aa 27       	eor	r26, r26
    106e:	28 30       	cpi	r18, 0x08	; 8
    1070:	51 f1       	breq	.+84     	; 0x10c6 <__ultoa_invert+0x5c>
    1072:	20 31       	cpi	r18, 0x10	; 16
    1074:	81 f1       	breq	.+96     	; 0x10d6 <__ultoa_invert+0x6c>
    1076:	e8 94       	clt
    1078:	6f 93       	push	r22
    107a:	6e 7f       	andi	r22, 0xFE	; 254
    107c:	6e 5f       	subi	r22, 0xFE	; 254
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	8f 4f       	sbci	r24, 0xFF	; 255
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	af 4f       	sbci	r26, 0xFF	; 255
    1086:	b1 e0       	ldi	r27, 0x01	; 1
    1088:	3e d0       	rcall	.+124    	; 0x1106 <__ultoa_invert+0x9c>
    108a:	b4 e0       	ldi	r27, 0x04	; 4
    108c:	3c d0       	rcall	.+120    	; 0x1106 <__ultoa_invert+0x9c>
    108e:	67 0f       	add	r22, r23
    1090:	78 1f       	adc	r23, r24
    1092:	89 1f       	adc	r24, r25
    1094:	9a 1f       	adc	r25, r26
    1096:	a1 1d       	adc	r26, r1
    1098:	68 0f       	add	r22, r24
    109a:	79 1f       	adc	r23, r25
    109c:	8a 1f       	adc	r24, r26
    109e:	91 1d       	adc	r25, r1
    10a0:	a1 1d       	adc	r26, r1
    10a2:	6a 0f       	add	r22, r26
    10a4:	71 1d       	adc	r23, r1
    10a6:	81 1d       	adc	r24, r1
    10a8:	91 1d       	adc	r25, r1
    10aa:	a1 1d       	adc	r26, r1
    10ac:	20 d0       	rcall	.+64     	; 0x10ee <__ultoa_invert+0x84>
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <__ultoa_invert+0x48>
    10b0:	68 94       	set
    10b2:	3f 91       	pop	r19
    10b4:	2a e0       	ldi	r18, 0x0A	; 10
    10b6:	26 9f       	mul	r18, r22
    10b8:	11 24       	eor	r1, r1
    10ba:	30 19       	sub	r19, r0
    10bc:	30 5d       	subi	r19, 0xD0	; 208
    10be:	31 93       	st	Z+, r19
    10c0:	de f6       	brtc	.-74     	; 0x1078 <__ultoa_invert+0xe>
    10c2:	cf 01       	movw	r24, r30
    10c4:	08 95       	ret
    10c6:	46 2f       	mov	r20, r22
    10c8:	47 70       	andi	r20, 0x07	; 7
    10ca:	40 5d       	subi	r20, 0xD0	; 208
    10cc:	41 93       	st	Z+, r20
    10ce:	b3 e0       	ldi	r27, 0x03	; 3
    10d0:	0f d0       	rcall	.+30     	; 0x10f0 <__ultoa_invert+0x86>
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__ultoa_invert+0x5c>
    10d4:	f6 cf       	rjmp	.-20     	; 0x10c2 <__ultoa_invert+0x58>
    10d6:	46 2f       	mov	r20, r22
    10d8:	4f 70       	andi	r20, 0x0F	; 15
    10da:	40 5d       	subi	r20, 0xD0	; 208
    10dc:	4a 33       	cpi	r20, 0x3A	; 58
    10de:	18 f0       	brcs	.+6      	; 0x10e6 <__ultoa_invert+0x7c>
    10e0:	49 5d       	subi	r20, 0xD9	; 217
    10e2:	31 fd       	sbrc	r19, 1
    10e4:	40 52       	subi	r20, 0x20	; 32
    10e6:	41 93       	st	Z+, r20
    10e8:	02 d0       	rcall	.+4      	; 0x10ee <__ultoa_invert+0x84>
    10ea:	a9 f7       	brne	.-22     	; 0x10d6 <__ultoa_invert+0x6c>
    10ec:	ea cf       	rjmp	.-44     	; 0x10c2 <__ultoa_invert+0x58>
    10ee:	b4 e0       	ldi	r27, 0x04	; 4
    10f0:	a6 95       	lsr	r26
    10f2:	97 95       	ror	r25
    10f4:	87 95       	ror	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	ba 95       	dec	r27
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__ultoa_invert+0x86>
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 05       	cpc	r22, r1
    1102:	71 05       	cpc	r23, r1
    1104:	08 95       	ret
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	0a 2e       	mov	r0, r26
    110c:	06 94       	lsr	r0
    110e:	57 95       	ror	r21
    1110:	47 95       	ror	r20
    1112:	37 95       	ror	r19
    1114:	27 95       	ror	r18
    1116:	ba 95       	dec	r27
    1118:	c9 f7       	brne	.-14     	; 0x110c <__ultoa_invert+0xa2>
    111a:	62 0f       	add	r22, r18
    111c:	73 1f       	adc	r23, r19
    111e:	84 1f       	adc	r24, r20
    1120:	95 1f       	adc	r25, r21
    1122:	a0 1d       	adc	r26, r0
    1124:	08 95       	ret

00001126 <__prologue_saves__>:
    1126:	2f 92       	push	r2
    1128:	3f 92       	push	r3
    112a:	4f 92       	push	r4
    112c:	5f 92       	push	r5
    112e:	6f 92       	push	r6
    1130:	7f 92       	push	r7
    1132:	8f 92       	push	r8
    1134:	9f 92       	push	r9
    1136:	af 92       	push	r10
    1138:	bf 92       	push	r11
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	ca 1b       	sub	r28, r26
    1150:	db 0b       	sbc	r29, r27
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	09 94       	ijmp

0000115e <__epilogue_restores__>:
    115e:	2a 88       	ldd	r2, Y+18	; 0x12
    1160:	39 88       	ldd	r3, Y+17	; 0x11
    1162:	48 88       	ldd	r4, Y+16	; 0x10
    1164:	5f 84       	ldd	r5, Y+15	; 0x0f
    1166:	6e 84       	ldd	r6, Y+14	; 0x0e
    1168:	7d 84       	ldd	r7, Y+13	; 0x0d
    116a:	8c 84       	ldd	r8, Y+12	; 0x0c
    116c:	9b 84       	ldd	r9, Y+11	; 0x0b
    116e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1170:	b9 84       	ldd	r11, Y+9	; 0x09
    1172:	c8 84       	ldd	r12, Y+8	; 0x08
    1174:	df 80       	ldd	r13, Y+7	; 0x07
    1176:	ee 80       	ldd	r14, Y+6	; 0x06
    1178:	fd 80       	ldd	r15, Y+5	; 0x05
    117a:	0c 81       	ldd	r16, Y+4	; 0x04
    117c:	1b 81       	ldd	r17, Y+3	; 0x03
    117e:	aa 81       	ldd	r26, Y+2	; 0x02
    1180:	b9 81       	ldd	r27, Y+1	; 0x01
    1182:	ce 0f       	add	r28, r30
    1184:	d1 1d       	adc	r29, r1
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	ed 01       	movw	r28, r26
    1192:	08 95       	ret

00001194 <_exit>:
    1194:	f8 94       	cli

00001196 <__stop_program>:
    1196:	ff cf       	rjmp	.-2      	; 0x1196 <__stop_program>
